<?php
/**
 * @file
 * Code for the Catalyst Core feature.
 */

include_once 'catalyst_core.features.inc';
include_once 'common/registry.inc';

/**
 * Implements hook_entity_view_alter().
 */
function catalyst_core_entity_view_alter(&$build, $type) {
  if ($type == 'catalyst' && !catalyst_theme_active()) {
    if (in_array($build['#view_mode'], array('full', 'teaser'))) {
      $build['#page'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme().
 */
function catalyst_core_theme() {
  $catalyst_path = catalyst_get_path();
  return array(
    'catalyst_template' => array(
      'variables' => array(
        'theme_original' => NULL,
        'element_original' => NULL,
        'template' => NULL,
      ),
      'path' => catalyst_get_path() . '/includes',
      'file' => 'theme.inc',
    ),
    'catalyst_menu_widget_menu_options' => array(
      'render element' => 'element',
      'template' => 'catalyst-menu-widget-menu-options',
      'path' => catalyst_get_path() . '/theme',
    ),
  );
}

/**
 * Implements hook_catalyst_twig_render_alter().
 */
function catalyst_core_catalyst_twig_render_alter(&$twig, &$variables, $key = NULL) {
  $twig->addFunction(new Twig_SimpleFunction('coreblock', 'catalyst_coreblock'));
  $twig->addFunction(new Twig_SimpleFunction('form', 'catalyst_twigform'));
}

function catalyst_twigform($callback) {
  $args = func_get_args();
  $form = call_user_func_array('drupal_get_form', $args);
  return render($form);
}


/**
 * Implements hook_action_info().
 */
function catalyst_core_action_info() {
  return array(
    'catalyst_update_package_action' => array(
      'type' => 'catalyst',
      'label' => t('Set or change package'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'catalyst_set_realm_system_action' => array(
      'type' => 'catalyst',
      'label' => t('Send to system realm'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'catalyst_set_realm_site_action' => array(
      'type' => 'catalyst',
      'label' => t('Send to site realm'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function catalyst_entity_info_alter(&$entity_info) {
  $entity_info['catalyst']['access callback'] = 'catalyst_entity_access_strict';
  // Restrict view modes on catalyst entities and add the "template" view
  // mode for the rendering of (some) templates
  $entity_info['catalyst']['view modes'] = array(
    'full' => array(
      'label' => 'Full',
      'custom settings' => FALSE,
    ),
    'template' => array(
      'label' => 'Template',
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Get info about catalyst types.
 */
function catalyst_get_plugin_info($plugin = NULL, $reset = NULL) {
  $stored_info = &drupal_static(__FUNCTION__);
  if ($reset || !isset($stored_info)) {
    foreach (module_implements('catalyst_plugin_info') AS $module) {
      foreach (module_invoke($module, 'catalyst_plugin_info') as $type => $info) {
        $stored_info[$type] = $info + array(
          'module' => $module,
          'exportables' => FALSE,
        );
      }
    }
    drupal_alter('catalyst_plugin_info', $stored_info);
  }
  if ($plugin) {
    return isset($stored_info[$plugin]) ? $stored_info[$plugin] : FALSE;
  }
  return $stored_info;
}

/**
 * Implements hook_hook_info().
 */
function catalyst_core_hook_info() {
  $group = array('group' => 'catalyst');
  // Layout hooks
  $hooks['catalyst_layout_alter'] = $group;
  // Plugin hooks
  $hooks['catalyst_plugin_info'] = $group;
  $hooks['catalyst_plugin_info_alter'] = $group;
  // Export hooks
  $hooks['catalyst_export_dependencies'] = $group;
  $hooks['catalyst_export_candidates'] = $group;
  $hooks['catalyst_prepare_export'] = $group;
  $hooks['catalyst_export_alter'] = $group;
  // Menu hooks
  $hooks['catalyst_ignore_menus'] = $group;
  $hooks['catalyst_ignore_menus_alter'] = $group;
  // Twig
  $hooks['catalyst_twig_render_alter'] = $group;
  // Fields, entities, and node related hooks
  $hooks['catalyst_node_types'] = $group;
  $hooks['catalyst_safe_fields'] = $group;
  $hooks['catalyst_import_alter'] = $group;
  $hooks['catalyst_export_metadata'] = $group;
  $hooks['catalyst_export_component'] = $group;
  $hooks['catalyst_registry_alter'] = $group;
  return $hooks;
}

/**
 * Implements hook_menu_alter().
 */
function catalyst_core_menu_alter(&$menu_items) {
  $path = 'admin/reports/fields';
  if (isset($menu_items[$path])) {
    $menu_items[$path] = array_merge($menu_items[$path], array(
      'page callback' => 'catalyst_field_ui_clean_field_list',
      'file path' => catalyst_get_path() . '/includes',
      'module' => 'catalyst_core',
      'file' => 'fields.inc',
    ));
  }
  catalyst_include('eck');
  catalyst_eck__entity_menu_alter($menu_items);
  catalyst_eck__bundle_menu_alter($menu_items);
  catalyst_eck__entity_type_menu_alter($menu_items);
  catalyst_include('menu_widget');
  if (variable_get('install_task', 'done') != 'install_system_module') {
    catalyst_menu_widget_menu_alter($menu_items);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make the field ui more usable by removing catalyst fields from none
 * catalyst entities.
 */
function catalyst_core_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  if ($form['#entity_type'] != 'catalyst')  {
    // After build callback in catalyst_core/includes/uncommoon.inc
    catalyst_form_load_include($form_state, 'uncommon');
    // Make any alterations as late as possible
    $form['#after_build'][] = 'catalyst_field_ui_field_overview_form_after_build';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide catalyst specific input formats (prefixed with catalyst_).
 *
 * These input formats are revealed when catalyst_devel is enabled.
 */
function catalyst_core_form_filter_admin_overview_alter(&$form, &$form_state) {
  // The theme function doesn't check access to the element so hiding the
  // relevant filters is insufficient. Collect catalyst formats in a separate
  // element where they will be completely hidden.
  $form['catalyst_formats'] = array('#access' => FALSE);
  // Maintain the weight for consistency
  $weight = 0;
  foreach (element_children($form['formats']) AS $id) {
    $form['formats'][$id]['#weight'] = $weight++;
    if (strpos($id, 'catalyst_') === 0) {
      $form['catalyst_formats'][$id] = $form['formats'][$id];
      unset($form['formats'][$id]);
    }
  }
}

function catalyst_form($form, $type, $machine, $vars) {
  $form['#catalyst_form'] = array(
    'vars' => $vars,
    'source' => array(
      'type' => $type,
      'machine' => $machine,
    ),
  );
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function catalyst_core_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#catalyst_form']) && !empty($form['#catalyst_form'])) {
    //if (!isset($form['#process'])) $form['#process'] = array();
    //array_unshift($form['#process'], 'catalyst_form_process');
    $source = $form['#catalyst_form']['source'];
    $item = catalyst_registry_entry($source['type'], $source['machine']);
    if (isset($item['assets']['preprocess.php'])) {
      $path = str_replace(drupal_realpath(DRUPAL_ROOT).'/', '', $item['assets']['preprocess.php']['filepath']);
      $form_state['build_info']['files']['catalyst_preprocess'] = $path;
    }
  }
  if (isset($form['field__menu'])) {
    catalyst_form_load_include($form_state, 'menu_widget');
    catalyst_menu_widget_form_alter($form, $form_state);
  }
  if (isset($form['field__data']) && $form['#bundle'] == 'package') {
    catalyst_form_load_include($form_state, 'package_form_alter');
    catalyst_package_form_alter($form, $form_state);
  }
}

/**
 *
 */
function catalyst_form_process($form, &$form_state) {
  if (!function_exists($form_state['build_info']['form_id'])) {
    $source = $form['#catalyst_form']['source'];
    //if ($preprocess_php = entity_valval($item['wrapper']->field__preprocess)) {
    //  catalyst_eval($preprocess_php, $form['#catalyst_form']['vars']);
    //}
  }
  return $form;
}

/**
 * Shortcut function to include common catalyst files.
 */
function catalyst_include($name, $module = 'core') {
  require_once drupal_get_path('module', 'catalyst_' . $module) . '/includes/' . $name . '.inc';
}

function catalyst_form_load_include(&$form_state, $name, $module = 'core') {
  return form_load_include($form_state, 'inc', 'catalyst_' . $module, 'includes/'. $name);
}

function catalyst_get_path($module = 'core') {
  return drupal_get_path('module', 'catalyst_'. $module);
}

function catalyst_node_types() {
  return array();
}

function catalyst_entity_is_a($bundle, $entity, $entity_type = 'catalyst', $bundle_key = 'type') {
  switch (true) {
    // Compare the entity type if one is provided
    case isset($entity->entity_type) && $entity->entity_type != $entity_type:
    // Compare the bundle
    case !isset($entity->{$bundle_key}) || $entity->{$bundle_key} != $bundle:
      return FALSE;
  }
  return TRUE;
}

function catalyst_entity_is_new($entity) {
  return isset($entity->is_new) && $entity->is_new;
}

function catalyst_entity_normalize($entity, $bundle = NULL, $entity_type = 'catalyst', $bundle_key = 'type') {
  $return = array();
  $bundle_info = $bundle && $bundle_key ? array($bundle_key => $bundle) : array();
  $wrapper = entity_metadata_wrapper($entity_type, $entity, $bundle_info);
  foreach ($wrapper->getPropertyInfo() AS $key => $info) {
    switch (get_class($wrapper->{$key})) {
      case 'EntityDrupalWrapper':
        $return[$key] = catalyst_entity_normalize_drupal($wrapper->{$key}, $info);
        break;
      case 'EntityListWrapper':
        $return[$key] = catalyst_entity_normalize_list($wrapper->{$key}, $info);
        break;
      default:
        $return[$key] = $wrapper->{$key}->value();
    }
  }
  return (object)$return;
}

function catalyst_entity_normalize_list(EntityListWrapper $wrapper, $info) {
  $return = array();
  foreach ($wrapper AS $key => $val) {
    switch (get_class($val)) {
      case 'EntityDrupalWrapper':
        $return[$key] = catalyst_entity_normalize_drupal($val, $info);
        break;
      case 'EntityValueWrapper':
      case 'EntityStructureWrapper':
        $return[$key] = $wrapper->value();
        break;
      default:
        $return[$key] = $val;
    }
  }
  return $return;
}

function catalyst_entity_normalize_drupal(EntityDrupalWrapper $wrapper, $info) {
  if ((!$entity = $wrapper->value()) || empty($entity->type)) {
    return $entity;
  }
  $m = array();
  if (preg_match('/list\<([a-z0-9_]+)\>/i', $info['type'], $m)) {
    $entity_type = $m[1];
  }
  else $entity_type = $info['type'];
  return catalyst_entity_normalize($entity, $entity->type, $entity_type);
}

/**
 * Helper function for array_merge().
 *
 * Merges all (array) arguments into the first argument which is a reference.
 *
 * Usage:
 * @code
 * catalyst_array_merge($array1, $array2, $array3);
 * @endcode
 *
 * @param array $result
 *   The base array of the merge whose reference will be merged into.
 *
 * @return array
 *   Returns the merged result array.
 */
function catalyst_array_merge(&$result) {
  $arrArgs = func_get_args();
  array_shift($arrArgs);
  $result = is_null($result) ? array() : (array)$result;
  while ($array = array_shift($arrArgs)) {
    $array = is_null($array) ? array() : (array)$array;
    $result = array_merge($result, $array);
  }
  return $result;
}

/**
 * @see eck__entity_access().
 */
function catalyst_entity_access_strict($op) {
  if ($op == 'view') {
    $args = func_get_args();
    return call_user_func_array('eck__entity_access', $args);
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide Catalyst features from the features admin list.
 *
 * Note: Catalyst features will be exposed when catalyst_devel is installed.
 */
function catalyst_core_form_features_admin_form_alter(&$form, &$form_state) {
  $form['package_catalyst']['#access'] = FALSE;
}

/**
 *
 */
function catalyst_menu_item_disable(&$menu_item) {
  if ($menu_item['access callback'] !== FALSE) {
    $menu_item['access callback original'] = $menu_item['access callback'];
    $menu_item['access callback'] = FALSE;
  }
}

function catalyst_menu_item_restore(&$menu_item) {
  if ($menu_item['access callback'] === FALSE) {
    $menu_item['access callback'] = $menu_item['access callback original'];
    unset($menu_item['access callback original']);
  }
}

function catalyst_set_realm_site_action($entity, $context) {
  $wrapper = entity_metadata_wrapper('catalyst', $entity);
  $wrapper->field__internal->set(FALSE);
}

function catalyst_set_realm_system_action($entity, $context) {
  $wrapper = entity_metadata_wrapper('catalyst', $entity);
  $wrapper->field__internal->set(TRUE);
}

function catalyst_update_package_action_form($context) {
  catalyst_include('actions');
  $context['entity_type'] = 'catalyst';
  return catalyst_update_package_form($context);
}
function catalyst_update_package_action_submit($form, $form_state) {
  catalyst_include('actions');
  return catalyst_update_package_form_submit($form, $form_state);
}
function catalyst_update_package_action($entity, $context) {
  catalyst_include('actions');
  catalyst_update_package($entity, $context);
}

function catalyst_render_block($module, $delta = '') {
  $block = block_load($module, $delta);
  $build = _block_get_renderable_array(_block_render_blocks(array($block)));
  return render($build);
}

function catalyst_menu_access_callback($entity_type, $entity_id) {
  if ($entity = entity_load_single($entity_type, $entity_id)) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $menu = entity_valval($wrapper->field__menu);
    if ($accessphp = entity_valval($wrapper->field__access)) {
      $variables = array();
      $exportvars = catalyst_menu_parse_path($menu['path']);
      return (boolean) catalyst_eval($accessphp, $variables, $exportvars);
    }
  }
  return FALSE;
}

function catalyst_menu_title_callback($entity_type, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $menu_options = entity_valval($wrapper->field__menu);
  $variables = catalyst_menu_parse_path($menu_options['path']);
  $key = implode(':', array(
    $wrapper->type(),
    $wrapper->getBundle(),
    $wrapper->getIdentifier(),
    'menu_title',
  ));
  module_load_include('inc', 'catalyst', 'includes/twig');
  return catalyst_twig_render($menu_options['menu']['title'], $variables, $key);
}

function catalyst_menu_parent_title_callback($entity_type, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $menu_options = entity_valval($wrapper->field__menu);
  $variables = catalyst_menu_parse_path($menu_options['path']);
  $key = implode(':', array(
    $wrapper->type(),
    $wrapper->getBundle(),
    $wrapper->getIdentifier(),
    'parent_menu_title',
  ));
  module_load_include('inc', 'catalyst', 'includes/twig');
  return catalyst_twig_render($menu_options['menu']['parent']['title'], $variables, $key);
}

function catalyst_menu_page_callback($entity_type, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  module_load_include('entity.inc', 'eck');
  return eck__entity__view_callback(array($entity), 'full', $wrapper->language());
}

function catalyst_menu_parse_path($path) {
  $return = array();
  $parts = explode('/', $path);
  foreach ($parts AS $i => $part) {
    if (strpos($part, '%') === 0) {
      $name = substr($part, 1);
      $loader = $name . '_load';
      if (function_exists($loader) && $loadId = arg($i)) {
        $return[$name] = $loader($loadId);
      }
    }
    elseif (strpos($part, '@') === 0) {
      $name = substr($part, 1);
      $return[$name] = NULL;
      if (arg($i)) {
        $return[$name] = arg($i);
      }
    }
  }
  return $return;
}

function catalyst_coreblock($module, $delta = 0, $render = true) {
  if ($block = block_load($module, $delta)) {
    if (!isset($block->title)) $block->title = null;
    if (!isset($block->region)) $block->region = null;
    $build = _block_get_renderable_array(_block_render_blocks(array($block)));
    return $render ? drupal_render($build) : $build;
  }
  throw new Exception(t('Missing block %delta in %module', array(
    '%module' => $module,
    '%delta' => $delta,
  )));
}

function catalyst_lookup_entity($type, $machine, $refresh = FALSE) {
  $entry = catalyst_registry_entry($type, $machine, $refresh);
  return $entry && !empty($entry->id) ? $entry->id : NULL;
}

function catalyst_entity_map() {
  $map = &drupal_static(__FUNCTION__);
  if (!isset($map)) {
    $result = db_query("SELECT entity_type, bundle, entity_id, field__machine_machine AS machine FROM {field_data_field__machine}");
    foreach ($result AS $item) {
      if (!isset($map[$item->entity_type])) {
        $map[$item->entity_type] = array();
      }
      if (!isset($map[$item->entity_type][$item->bundle])) {
        $map[$item->entity_type][$item->bundle] = array();
      }
      $map[$item->entity_type][$item->bundle][$item->machine] = $item->entity_id;
    }
  }
  return $map;
}

/**
 *
 * @code
 * Load all entities of one type.
 * catalyst_load('block');
 *
 * Load multiple entities by numeric db id.
 * Depends on the first parameter being a numeric (non-associative) array with
 * integer values.
 * catalyst_load(array(1, 2, 3), TRUE);
 *
 * Load multiple entities by machine name.
 * Depends on the second parameter being a numeric (non-associative) array with
 * string values.
 * catalyst_load('block', array('block_1', 'block_2'));
 *
 * Load multiple entities by conditions.
 * Depends on the second parameter being an ASSOCIATIVE array.
 * catalyst_load('block', array('filter1' => 1));
 * @endcode
 */
function catalyst_load($a0) {
  $arg = func_get_args();
  if (is_array($a0)) {
    $refresh = isset($arg[1]) ? $arg[1] : FALSE;
    $entities = entity_load('catalyst', $a0, array(), $refresh);
  }
  else {
    $type = $a0;
    if (!isset($arg[1]) || !is_array($arg[1])) {
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'catalyst', '=')
        ->propertyCondition('type', $type, '=')
        ->execute();
      $entities = entity_load('catalyst', array_keys($result['catalyst']), array(), isset($arg[1]) && $arg[1]);
    }
    else {
      $keys = array_keys($arg[1]);
      $refresh = isset($arg[2]) && $arg[2];
      $ids = array();
      if (is_numeric($keys[0])) {
        foreach ($arg[1] AS $mxd) {
          if (is_numeric($mxd)) {
            $ids[] = (int)$mxd;
          }
          else if ($id = catalyst_lookup_entity($type, $mxd)) {
            $ids[] = $id;
          }
        }
        if ($ids) {
          $entities = entity_load('catalyst', $ids, array(), $refresh);
        }
        else return array();
      }
      else {
        $entities = entity_load('catalyst', NULL, $conditions, $refresh);
      }
    }
  }
  $return = array();
  foreach ($entities AS $key => $entity) {
    $entry = catalyst_registry_entry($entity->type, $entity->machine);
    $entry->machine = $entity->machine;
    $entry->type = $entity->type;
    $entry->entity = $entity;
    $entry->wrapper = entity_metadata_wrapper('catalyst', $entity);
    $return[$key] = $entry;
  }
  return $return;
}

/**
 * @code
 * Load by machine name (with optional refresh option):
 * catalyst_load_single('block', 'my_block', TRUE);
 *
 * Load by entity id (with optional refresh option):
 * catalyst_load_single(133);
 *
 * @endcode
 */
function catalyst_load_single($a0) {
  $arg = func_get_args();
  if (count($arg) < 1) {
    throw new Exception('Invalid parameteres in '.__function__);
  }
  else if (is_numeric($arg[0])) {
    $id = $arg[0];
    $refresh = isset($arg[1]) ? $arg[1] : FALSE;
    $entities = catalyst_load(array($id), $refresh);
  }
  else {
    $id = $arg[1];
    $refresh = isset($arg[2]) ? $arg[2] : FALSE;
    $entities = catalyst_load($arg[0], array($id), $refresh);
  }
  return array_shift($entities);
}

/**
 * Implements hook_entity_load().
 */
function catalyst_core_entity_load(&$entities, $entity_type) {
  if ($entity_type != 'catalyst') return;
  foreach ($entities AS $key => &$entity) {
    $lang = $entity->language;
    // Provide shortcut for machine
    $entity->machine = $entity->field__machine[$lang][0]['machine'];
  }
}

/**
 * Implements hook_entity_update().
 */
function catalyst_core_entity_update($entity, $type) {
  if ($type == 'catalyst') catalyst_registry_needs_rebuild();
}

/**
 * Implements hook_entity_delete().
 */
function catalyst_core_entity_delete($entity, $type) {
  if ($type == 'catalyst') catalyst_registry_needs_rebuild();
}

/**
 * Implements hook_entity_insert().
 */
function catalyst_core_entity_insert($entity, $type) {
  if ($type == 'catalyst') catalyst_registry_needs_rebuild();
}

/**
 * Returns catalyst fields that are *safe* for other entity types.
 */
function catalyst_safe_fields() {
  $fields = module_invoke_all(__FUNCTION__);
  $fields[] = 'field__js';
  $fields[] = 'field__css';
  drupal_alter(__FUNCTION__, $fields);
  return $fields;
}

/**
 * Resolve a field to it's type.
 *
 * @param
 */
function catalyst_resolve_field($field_name_abbr, $bundle, $entity_type = 'catalyst') {
  static $cache;
  if (!isset($cache)) $cache = array();
  if (!isset($cache[$entity_type])) $cache[$entity_type] = array();
  if (!isset($cache[$entity_type][$bundle])) $cache[$entity_type][$bundle] = array();
  $field_name_abbr = str_replace('field__', '', $field_name_abbr);
  if (!isset($cache[$entity_type][$bundle][$field_name_abbr])) {
    $suffixes = array($field_name_abbr);
    switch ($field_name_abbr) {
      case 'media_stylesheets':
      case 'media_javascripts':
        array_push($suffixes, $field_name_abbr . '__layout', $field_name_abbr . '__page');
        break;
      case 'css':
      case 'js':
        break;
      case 'blockplacements':
        $suffixes = array(
          $field_name_abbr . '__block',
          $field_name_abbr . '__layout',
          $field_name_abbr . '__layfield',
        );
        break;
    }
    $instances = field_info_instances($entity_type, $bundle);
    $result = FALSE;
    foreach ($suffixes AS $suffix) {
      $field_name = 'field__' . $suffix;
      if (isset($instances[$field_name])) {
        $result = $instances[$field_name];
        if (!empty($result['settings']['better_formats']['allowed_formats'])) {
          $formats = array_keys(array_filter($result['settings']['better_formats']['allowed_formats']));
          $result['format'] = array_pop($formats);
        }
        break;
      }
    }
    $cache[$entity_type][$bundle][$field_name_abbr] = $result;
  }
  return $cache[$entity_type][$bundle][$field_name_abbr];
}
