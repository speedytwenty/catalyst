<?php
/**
 * @file
 * Code for the Catalyst Media feature.
 */

include_once 'catalyst_media.features.inc';

define('CATALYST_MEDIA_GROUP_LAYOUT', 101);
define('CATALYST_MEDIA_GROUP_LIBRARY', 202);
define('CATALYST_MEDIA_GROUP_PAGE', 303);
define('CATALYST_MEDIA_GROUP_OTHER', 404);

/**
 * Implements hook_entity_view_alter().
 */
function catalyst_media_entity_view_alter(&$build, $type) {
  if (isset($build['field_media_content'])) {
    if ($template = $build['field_media_content'][0]['#markup']) {
      theme('media_content', array(
        'template' => $template,
      ));
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function catalyst_media_url_outbound_alter(&$path, &$options, $original_path) {
  catalyst_include('eck', 'admin');
  catalyst_admin_eck_url_outbound('stylesheet', $path, $options, $original_path);
  catalyst_admin_eck_url_outbound('javascript', $path, $options, $original_path);
  catalyst_admin_eck_url_outbound('file', $path, $options, $original_path, 'admin/content');
}

/**
 * Implements hook_menu_alter().
 */
function catalyst_media_menu_alter(&$items) {
  catalyst_include('eck', 'admin');
  catalyst_admin_alter_eck_entity_menu($items, 'stylesheet', 'admin/structure', FALSE);
  catalyst_admin_alter_eck_entity_menu($items, 'javascript', 'admin/structure', FALSE);
  catalyst_admin_alter_eck_entity_menu($items, 'file', 'admin/content', FALSE);
  // Allow the files list to appear as a tab and a normal item
  $items['admin/content/file']['type'] = MENU_LOCAL_TASK | MENU_NORMAL_ITEM;
}

/**
 * Implements hook_module_implements_alter().
 */
function catalyst_media_module_implements_alter(&$implementations, $hook) {
  // Run catalyst_media_menu_alter() after views_menu_alter() to allow
  // modifying menu items provided by views.
  if ($hook == 'menu_alter') {
    $group = $implementations['catalyst_media'];
    unset($implementations['catalyst_media']);
    $implementations['catalyst_media'] = $group;
  }
}

/**
 * Implements hook_catalyst_twig_render_alter().
 */
function catalyst_media_catalyst_twig_render_alter(&$twig, &$extensions, &$variables, $key = NULL) {
  $extensions['addFunction']['filepath'] = new Twig_SimpleFunction('filepath', 'catalyst_media_filepath');
  $extensions['addFunction']['fileurl'] = new Twig_SimpleFunction('fileurl', 'catalyst_media_fileurl');
  $extensions['addFunction']['customfilepath'] = new Twig_SimpleFunction('customfilepath', 'catalyst_media_customfilepath');
  $extensions['addFunction']['customfileurl'] = new Twig_SimpleFunction('customfileurl', 'catalyst_media_customfileurl');
}

function catalyst_media_customfilepath($basename, $format = 'path') {
  $entity = drupal_static('twig_render_entity_wrapper', FALSE);
  if ($entity && $entity->field_catalyst_custom_files) {
    foreach ($entity->field_catalyst_custom_files->value() AS $file) {
      if ($file['filename'] == $basename) {
        $url = file_create_url($file['uri']);
        if ($format == 'url') {
          return $url;
        }
        $url = parse_url($url);
        return $url['path'];
      }
    }
  }
  // log error
}
function catalyst_media_customfileurl($basename) {
  return catalyst_media_customfilepath($basename, 'url');
}

function catalyst_media_filepath($machine_name, $format = 'path') {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'catalyst')
    ->entityCondition('bundle', 'file')
    ->fieldCondition('field_media_machine', 'machine', $machine_name, '=')
    ->addTag(__FUNCTION__);
  $result = $query->execute();
  if (isset($result['catalyst'])) {
    $results = entity_load('catalyst', array_keys($result['catalyst']));
    $file = array_pop($results);
    $file = entity_metadata_wrapper('catalyst', $file);
    switch ($file->field_media_type->value()) {
      case 'local':
      case 'remote':
        return url($file->field_media_path->value());
      case 'custom':
        if ($format == 'url') {
          return $file->field_media_file->file->url->value();
        }
        else {
          $url = parse_url($file->field_media_file->file->url->value());
          return $url['path'];
        }
    }
  }
  // log error
}

function catalyst_media_fileurl($machine_name) {
  return catalyst_media_filepath($machine_name, 'url');
}

/**
 * Implements hook_form_alter().
 */
function catalyst_media_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_media_type'], $form['field_media_path'])) {
    $form['#attached']['js'][] = drupal_get_path('module', 'catalyst_media') . '/catalyst_media.admin.js';
    $form['#after_build'][] = 'catalyst_media_admin_form_after_build';
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function catalyst_media_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  catalyst_media_form_alter($entity_form, $form_state, NULL);
}

function catalyst_media_admin_form_after_build($form, &$form_state) {
  $ids = array(
    'type' => $form['field_media_type']['#id'],
    'path' => $form['field_media_path']['#id'],
  );
  if (isset($form['field_media_content'])) {
    $ids['custom'] = $form['field_media_content']['#id'];
  }
  elseif (isset($form['field_media_file'])) {
    $ids['custom'] = $form['field_media_file']['#id'];
  }
  $form['#attached']['js'][] = array(
    'data' => array('catalystMediaAdmin' => array('ids' => $ids)),
    'type' => 'setting'
  );
  return $form;
}

/**
 * Implements hook_entity_view().
 */
function catalyst_media_entity_view($entity, $type, $view_mode, $langcode) {
  $collection = array(
    'css' => array(
      'field_layout_includes_css' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_includes_css' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_includes_css' => CATALYST_MEDIA_GROUP_OTHER,
    ),
    'js' => array(
      'field_layout_includes_js' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_includes_js' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_includes_js' => CATALYST_MEDIA_GROUP_OTHER,
    ),
  );

  $wrapper = entity_metadata_wrapper($type, $entity);
  foreach ($collection AS $type => $fields) {
    $callback = 'catalyst_add_' . $type;
    foreach ($fields AS $field => $group) {
      if (isset($entity->$field)) {
        foreach ($wrapper->$field->value() AS $include) {
          $include = entity_metadata_wrapper('catalyst', $include);
          $callback($include, $group);
        }
      }
    }
  }

  // Process custom fields
  $collection = array(
    'css' => array(
      'field_layout_css' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_custom_css' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_custom_css' => CATALYST_MEDIA_GROUP_OTHER,
    ),
    'js' => array(
      'field_layout_js' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_custom_js' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_custom_js' => CATALYST_MEDIA_GROUP_OTHER,
    ),
  );
  foreach ($collection AS $type => $fields) {
    $callback = 'catalyst_add_custom_' . $type;
    foreach ($fields AS $field => $group) {
      if (!empty($entity->$field)) {
        foreach ($wrapper->$field->value() AS $data) {
          $callback($data, $group, $field, $wrapper->getIdentifier());
        }
      }
    }
  }
}
