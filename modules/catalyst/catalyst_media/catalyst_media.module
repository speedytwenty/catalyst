<?php
/**
 * @file
 * Code for the Catalyst Media feature.
 */

include_once 'catalyst_media.features.inc';

define('CATALYST_MEDIA_GROUP_LAYOUT', 101);
define('CATALYST_MEDIA_GROUP_LIBRARY', 202);
define('CATALYST_MEDIA_GROUP_PAGE', 303);
define('CATALYST_MEDIA_GROUP_OTHER', 404);

/**
 * Implements hook_entity_view_alter().
 */
function catalyst_media_entity_view_alter(&$build, $type) {
  if (isset($build['field__body']) && isset($build['#entity'])
    && $build['#entity_type'] == 'catalyst'
    && in_array($build['#bundle'], array('stylesheet', 'javascript'))) {
    if ($template = $build['field__body'][0]['#markup']) {
      theme('media_content', array(
        'template' => $template,
      ));
    }
  }
}

/**
 * Implements hook_catalyst_twig_render_alter().
 */
function catalyst_media_catalyst_twig_render_alter(&$twig, &$extensions, &$variables, $key = NULL) {
  $extensions['addFunction']['filepath'] = new Twig_SimpleFunction('filepath', 'catalyst_media_filepath');
  $extensions['addFunction']['fileurl'] = new Twig_SimpleFunction('fileurl', 'catalyst_media_fileurl');
  $extensions['addFunction']['customfilepath'] = new Twig_SimpleFunction('customfilepath', 'catalyst_media_customfilepath');
  $extensions['addFunction']['customfileurl'] = new Twig_SimpleFunction('customfileurl', 'catalyst_media_customfileurl');
}

function catalyst_media_customfilepath($basename, $format = 'path') {
  $entity = drupal_static('twig_render_entity_wrapper', FALSE);
  if ($entity && $entity->field__files) {
    foreach ($entity->field__files->value() AS $file) {
      if ($file['filename'] == $basename) {
        $url = file_create_url($file['uri']);
        if ($format == 'url') {
          return $url;
        }
        $url = parse_url($url);
        return $url['path'];
      }
    }
  }
  // log error
}
function catalyst_media_customfileurl($basename) {
  return catalyst_media_customfilepath($basename, 'url');
}

function catalyst_media_filepath($machine_name, $format = 'path') {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'catalyst')
    ->entityCondition('bundle', 'file')
    ->fieldCondition('field__machine', 'machine', $machine_name, '=')
    ->addTag(__FUNCTION__);
  $result = $query->execute();
  if (isset($result['catalyst'])) {
    $results = entity_load('catalyst', array_keys($result['catalyst']));
    $file = array_pop($results);
    $file = entity_metadata_wrapper('catalyst', $file);
    switch ($file->field__media_type->value()) {
      case 'local':
      case 'remote':
        return url($file->field__media_path->value());
      case 'custom':
        if (!isset($file->field__media_file) || !$file->field__media_file->value()) {
          throw new Exception(t('Missing catalyst file: @machine_name', array('@machine_name' => $machine_name)));
        }

        if ($format == 'url') {
          return $file->field__media_file->file->url->value();
        }
        else {
          $url = parse_url($file->field__media_file->file->url->value());
          return $url['path'];
        }
    }
  }
  // log error
}

function catalyst_media_fileurl($machine_name) {
  return catalyst_media_filepath($machine_name, 'url');
}

/**
 * Implements hook_form_alter().
 */
function catalyst_media_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field__media_type'], $form['field__media_path'])) {
    $form['#attached']['js'][] = drupal_get_path('module', 'catalyst_media') . '/catalyst_media.admin.js';
    $form['#after_build'][] = 'catalyst_media_admin_form_after_build';
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function catalyst_media_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  catalyst_media_form_alter($entity_form, $form_state, NULL);
}

function catalyst_media_admin_form_after_build($form, &$form_state) {
  $ids = array(
    'type' => $form['field__media_type']['#id'],
    'path' => $form['field__media_path']['#id'],
  );
  if (isset($form['field__body'])) {
    $ids['custom'] = $form['field__body']['#id'];
  }
  elseif (isset($form['field__media_file'])) {
    $ids['custom'] = $form['field__media_file']['#id'];
  }
  $form['#attached']['js'][] = array(
    'data' => array('catalystMediaAdmin' => array('ids' => $ids)),
    'type' => 'setting'
  );
  return $form;
}

/**
 * Implements hook_entity_view().
 */
function catalyst_media_entity_view($entity, $type, $view_mode, $langcode) {
  $collection = array(
    'css' => array(
      'field__media_stylesheets__layout' => CATALYST_CSS_LAYOUT,
      'field__media_stylesheets__page' => CATALYST_CSS_PAGE,
      'field__media_stylesheets' => CATALYST_CSS_OTHER,
    ),
    'js' => array(
      'field__media_javascripts__layout' => CATALYST_JS_LAYOUT,
      'field__media_javascripts__page' => CATALYST_JS_PAGE,
      'field__media_javascripts' => CATALYST_JS_OTHER,
    ),
  );
  $wrapper = entity_metadata_wrapper($type, $entity);
  foreach ($collection AS $type => $fields) {
    $callback = 'catalyst_add_' . $type;
    foreach ($fields AS $field => $group) {
      if (isset($entity->$field)) {
        foreach ($wrapper->$field->value() AS $delta => $include) {
          $include = entity_metadata_wrapper('catalyst', $include);
          // Ensure the include exists before attempting to add it
          if ($include->value()) {
            $callback($include, $group, $delta);
          }
        }
      }
    }
  }
  // This needs to move to catalyst_core
  // Process custom fields
  $collection = array(
    'css' => array(
      'field__css__layout' => CATALYST_CSS_LAYOUT,
      'field__css__page' => CATALYST_CSS_PAGE,
      'field__css' => CATALYST_CSS_OTHER,
    ),
    'js' => array(
      'field__js__layout' => CATALYST_JS_LAYOUT,
      'field__js__page' => CATALYST_JS_PAGE,
      'field__js' => CATALYST_JS_OTHER,
    ),
  );
  foreach ($collection AS $type => $fields) {
    $callback = 'catalyst_add_custom_' . $type;
    foreach ($fields AS $field => $group) {
      if (!empty($entity->$field)) {
        foreach ($wrapper->$field->value() AS $data) {
          $callback($data, $group, $field, $wrapper->getIdentifier());
        }
      }
    }
  }
}
