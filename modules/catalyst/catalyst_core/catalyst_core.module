<?php
/**
 * @file
 * Code for the Catalyst Core feature.
 */

include_once 'catalyst_core.features.inc';

/**
 * Implements hook_theme().
 */
function catalyst_core_theme() {
  $catalyst_path = catalyst_get_path();
  return array(
    'catalyst_template' => array(
      'variables' => array(
        'theme_original' => NULL,
        'element_original' => NULL,
        'template' => NULL,
      ),
      'path' => catalyst_get_path() . '/includes',
      'file' => 'theme.inc',
    ),
    'catalyst_menu_widget_menu_options' => array(
      'render element' => 'element',
      'template' => 'catalyst-menu-widget-menu-options',
      'path' => catalyst_get_path() . '/theme',
    ),
  );
}

/**
 * Implements hook_catalyst_twig_render_alter().
 */
function catalyst_core_catalyst_twig_render_alter(&$twig, &$variables, $key = NULL) {
  $twig->addFunction(new Twig_SimpleFunction('coreblock', 'catalyst_coreblock'));
}


/**
 * Implements hook_action_info().
 */
function catalyst_core_action_info() {
  return array(
    'catalyst_update_package_action' => array(
      'type' => 'catalyst',
      'label' => t('Set or change package'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'catalyst_set_realm_system_action' => array(
      'type' => 'catalyst',
      'label' => t('Send to system realm'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'catalyst_set_realm_site_action' => array(
      'type' => 'catalyst',
      'label' => t('Send to site realm'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function catalyst_entity_info_alter(&$entity_info) {
  $entity_info['catalyst']['access callback'] = 'catalyst_entity_access_strict';
  // Restrict view modes on catalyst entities and add the "template" view
  // mode for the rendering of (some) templates
  $entity_info['catalyst']['view modes'] = array(
    'full' => array(
      'label' => 'Full',
      'custom settings' => FALSE,
    ),
    'template' => array(
      'label' => 'Template',
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Get info about catalyst types.
 */
function catalyst_get_plugin_info($plugin = NULL, $reset = NULL) {
  $stored_info = &drupal_static(__FUNCTION__);
  if ($reset || !isset($stored_info)) {
    foreach (module_implements('catalyst_plugin_info') AS $module) {
      foreach (module_invoke($module, 'catalyst_plugin_info') as $type => $info) {
        $stored_info[$type] = $info + array(
          'module' => $module,
          'exportables' => FALSE,
        );
      }
    }
    drupal_alter('catalyst_plugin_info', $stored_info);
  }
  if ($plugin) {
    return isset($stored_info[$plugin]) ? $stored_info[$plugin] : FALSE;
  }
  return $stored_info;
}

/**
 * Implements hook_hook_info().
 */
function catalyst_core_hook_info() {
  $group = array('group' => 'catalyst');
  // Layout hooks
  $hooks['catalyst_layout_alter'] = $group;
  // Plugin hooks
  $hooks['catalyst_plugin_info'] = $group;
  $hooks['catalyst_plugin_info_alter'] = $group;
  // Export hooks
  $hooks['catalyst_export_dependencies'] = $group;
  $hooks['catalyst_export_candidates'] = $group;
  $hooks['catalyst_prepare_export'] = $group;
  $hooks['catalyst_export_alter'] = $group;
  // Menu hooks
  $hooks['catalyst_ignore_menus'] = $group;
  $hooks['catalyst_ignore_menus_alter'] = $group;
  // Twig
  $hooks['catalyst_twig_render_alter'] = $group;
  // Fields, entities, and node related hooks
  $hooks['catalyst_node_types'] = $group;
  $hooks['catalyst_safe_fields'] = $group;
  return $hooks;
}

/**
 * Implements hook_menu_alter().
 */
function catalyst_core_menu_alter(&$menu_items) {
  $path = 'admin/reports/fields';
  if (isset($menu_items[$path])) {
    $menu_items[$path] = array_merge($menu_items[$path], array(
      'page callback' => 'catalyst_field_ui_clean_field_list',
      'file path' => catalyst_get_path() . '/includes',
      'module' => 'catalyst_core',
      'file' => 'fields.inc',
    ));
  }
  catalyst_include('eck');
  catalyst_eck__entity_menu_alter($menu_items);
  catalyst_eck__bundle_menu_alter($menu_items);
  catalyst_eck__entity_type_menu_alter($menu_items);
  catalyst_include('menu_widget');
  if (variable_get('install_task', 'done') != 'install_system_module') {
    catalyst_menu_widget_menu_alter($menu_items);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make the field ui more usable by removing catalyst fields from none
 * catalyst entities.
 */
function catalyst_core_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  if ($form['#entity_type'] == 'catalyst')  {
    // After build callback in catalyst_core/includes/uncommoon.inc
    catalyst_form_load_include($form_state, 'uncommon');
    // Make any alterations as late as possible
    $form['#after_build'][] = 'catalyst_field_ui_field_overview_form_after_build';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide catalyst specific input formats (prefixed with catalyst_).
 *
 * These input formats are revealed when catalyst_devel is enabled.
 */
function catalyst_core_form_filter_admin_overview_alter(&$form, &$form_state) {
  // The theme function doesn't check access to the element so hiding the
  // relevant filters is insufficient. Collect catalyst formats in a separate
  // element where they will be completely hidden.
  $form['catalyst_formats'] = array('#access' => FALSE);
  // Maintain the weight for consistency
  $weight = 0;
  foreach (element_children($form['formats']) AS $id) {
    $form['formats'][$id]['#weight'] = $weight++;
    if (strpos($id, 'catalyst_') === 0) {
      $form['catalyst_formats'][$id] = $form['formats'][$id];
      unset($form['formats'][$id]);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function catalyst_core_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field__menu'])) {
    catalyst_form_load_include($form_state, 'menu_widget');
    catalyst_menu_widget_form_alter($form, $form_state);
  }
}

/**
 * Shortcut function to include common catalyst files.
 */
function catalyst_include($name, $module = 'core') {
  require_once drupal_get_path('module', 'catalyst_' . $module) . '/includes/' . $name . '.inc';
}

function catalyst_form_load_include(&$form_state, $name, $module = 'core') {
  return form_load_include($form_state, 'inc', 'catalyst_' . $module, 'includes/'. $name);
}

function catalyst_get_path($module = 'core') {
  return drupal_get_path('module', 'catalyst_'. $module);
}

function catalyst_node_types() {
  return array();
}

function catalyst_entity_is_a($bundle, $entity, $entity_type = 'catalyst', $bundle_key = 'type') {
  switch (true) {
    // Compare the entity type if one is provided
    case isset($entity->entity_type) && $entity->entity_type != $entity_type:
    // Compare the bundle
    case !isset($entity->{$bundle_key}) || $entity->{$bundle_key} != $bundle:
      return FALSE;
  }
  return TRUE;
}

function catalyst_entity_is_new($entity) {
  return isset($entity->is_new) && $entity->is_new;
}

function catalyst_entity_normalize($entity, $bundle = NULL, $entity_type = 'catalyst', $bundle_key = 'type') {
  $return = array();
  $bundle_info = $bundle && $bundle_key ? array($bundle_key => $bundle) : array();
  $wrapper = entity_metadata_wrapper($entity_type, $entity, $bundle_info);
  foreach ($wrapper->getPropertyInfo() AS $key => $info) {
    switch (get_class($wrapper->{$key})) {
      case 'EntityDrupalWrapper':
        $return[$key] = catalyst_entity_normalize_drupal($wrapper->{$key}, $info);
        break;
      case 'EntityListWrapper':
        $return[$key] = catalyst_entity_normalize_list($wrapper->{$key}, $info);
        break;
      default:
        $return[$key] = $wrapper->{$key}->value();
    }
  }
  return (object)$return;
}

function catalyst_entity_normalize_list(EntityListWrapper $wrapper, $info) {
  $return = array();
  foreach ($wrapper AS $key => $val) {
    switch (get_class($val)) {
      case 'EntityDrupalWrapper':
        $return[$key] = catalyst_entity_normalize_drupal($val, $info);
        break;
      case 'EntityValueWrapper':
      case 'EntityStructureWrapper':
        $return[$key] = $wrapper->value();
        break;
      default:
        $return[$key] = $val;
    }
  }
  return $return;
}

function catalyst_entity_normalize_drupal(EntityDrupalWrapper $wrapper, $info) {
  if ((!$entity = $wrapper->value()) || empty($entity->type)) {
    return $entity;
  }
  $m = array();
  if (preg_match('/list\<([a-z0-9_]+)\>/i', $info['type'], $m)) {
    $entity_type = $m[1];
  }
  else $entity_type = $info['type'];
  return catalyst_entity_normalize($entity, $entity->type, $entity_type);
}

/**
 * Helper function for array_merge().
 *
 * Merges all (array) arguments into the first argument which is a reference.
 *
 * Usage:
 * @code
 * catalyst_array_merge($array1, $array2, $array3);
 * @endcode
 *
 * @param array $result
 *   The base array of the merge whose reference will be merged into.
 *
 * @return array
 *   Returns the merged result array.
 */
function catalyst_array_merge(&$result) {
  $arrArgs = func_get_args();
  array_shift($arrArgs);
  $result = is_null($result) ? array() : (array)$result;
  while ($array = array_shift($arrArgs)) {
    $array = is_null($array) ? array() : (array)$array;
    $result = array_merge($result, $array);
  }
  return $result;
}

/**
 * @see eck__entity_access().
 */
function catalyst_entity_access_strict($op) {
  if ($op == 'view') {
    $args = func_get_args();
    return call_user_func_array('eck__entity_access', $args);
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide Catalyst features from the features admin list.
 *
 * Note: Catalyst features will be exposed when catalyst_devel is installed.
 */
function catalyst_core_form_features_admin_form_alter(&$form, &$form_state) {
  $form['package_catalyst']['#access'] = FALSE;
}

/**
 *
 */
function catalyst_menu_item_disable(&$menu_item) {
  if ($menu_item['access callback'] !== FALSE) {
    $menu_item['access callback original'] = $menu_item['access callback'];
    $menu_item['access callback'] = FALSE;
  }
}

function catalyst_menu_item_restore(&$menu_item) {
  if ($menu_item['access callback'] === FALSE) {
    $menu_item['access callback'] = $menu_item['access callback original'];
    unset($menu_item['access callback original']);
  }
}

function catalyst_set_realm_site_action($entity, $context) {
  $wrapper = entity_metadata_wrapper('catalyst', $entity);
  $wrapper->field__internal->set(FALSE);
}

function catalyst_set_realm_system_action($entity, $context) {
  $wrapper = entity_metadata_wrapper('catalyst', $entity);
  $wrapper->field__internal->set(TRUE);
}

function catalyst_update_package_action_form($context) {
  catalyst_include('actions');
  $context['entity_type'] = 'catalyst';
  return catalyst_update_package_form($context);
}
function catalyst_update_package_action_submit($form, $form_state) {
  catalyst_include('actions');
  return catalyst_update_package_form_submit($form, $form_state);
}
function catalyst_update_package_action($entity, $context) {
  catalyst_include('actions');
  catalyst_update_package($entity, $context);
}

function catalyst_render_block($module, $delta = '') {
  $block = block_load($module, $delta);
  $build = _block_get_renderable_array(_block_render_blocks(array($block)));
  return render($build);
}

function catalyst_menu_access_callback($entity_type, $entity_id) {
  if ($entity = entity_load_single($entity_type, $entity_id)) {
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    $menu = entity_valval($wrapper->field__menu);
    if ($accessphp = entity_valval($wrapper->field__access)) {
      $variables = array();
      $exportvars = catalyst_menu_parse_path($menu['path']);
      return (boolean) catalyst_eval($accessphp, $variables, $exportvars);
    }
  }
  return FALSE;
}

function catalyst_menu_title_callback($entity_type, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $menu_options = entity_valval($wrapper->field__menu);
  $variables = catalyst_menu_parse_path($menu_options['path']);
  $key = implode(':', array(
    $wrapper->type(),
    $wrapper->getBundle(),
    $wrapper->getIdentifier(),
    'menu_title',
  ));
  module_load_include('inc', 'catalyst', 'includes/twig');
  return catalyst_twig_render($menu_options['menu']['title'], $variables, $key);
}

function catalyst_menu_parent_title_callback($entity_type, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  $menu_options = entity_valval($wrapper->field__menu);
  $variables = catalyst_menu_parse_path($menu_options['path']);
  $key = implode(':', array(
    $wrapper->type(),
    $wrapper->getBundle(),
    $wrapper->getIdentifier(),
    'parent_menu_title',
  ));
  module_load_include('inc', 'catalyst', 'includes/twig');
  return catalyst_twig_render($menu_options['menu']['parent']['title'], $variables, $key);
}

function catalyst_menu_page_callback($entity_type, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  module_load_include('entity.inc', 'eck');
  return eck__entity__view_callback(array($entity), 'full', $wrapper->language());
}

function catalyst_menu_parse_path($path) {
  $return = array();
  $parts = explode('/', $path);
  foreach ($parts AS $i => $part) {
    if (strpos($part, '%') === 0) {
      $name = substr($part, 1);
      $loader = $name . '_load';
      if (function_exists($loader) && $loadId = arg($i)) {
        $return[$name] = $loader($loadId);
      }
    }
    elseif (strpos($part, '@') === 0) {
      $name = substr($part, 1);
      $return[$name] = NULL;
      if (arg($i)) {
        $return[$name] = arg($i);
      }
    }
  }
  return $return;
}

function catalyst_coreblock($module, $delta = 0, $render = true) {
  if ($block = block_load($module, $delta)) {
    if (!isset($block->title)) $block->title = null;
    if (!isset($block->region)) $block->region = null;
    $build = _block_get_renderable_array(_block_render_blocks(array($block)));
    return $render ? drupal_render($build) : $build;
  }
  throw new Exception(t('Missing block %delta in %module', array(
    '%module' => $module,
    '%delta' => $delta,
  )));
}

function catalyst_lookup_entity($bundle, $machine_name) {
  $lookups = &drupal_static(__FUNCTION__);
  if (!isset($lookups)) {
    $lookups = array();
  }
  if (!isset($lookups[$bundle])) {
    $lookups[$bundle] = array();
  }
  if (!isset($lookups[$bundle][$machine_name])) {
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'catalyst')
      ->entityCondition('bundle', $bundle)
      ->fieldCondition('field__machine', 'machine', $machine_name, '=')
      ->addTag(__FUNCTION__);
    $result = $query->execute();
    if (isset($result['catalyst'])) {
      $result = array_keys($result['catalyst']);
      $lookups[$bundle][$machine_name] = $result[0];
    }
    else {
      $lookups[$bundle][$machine_name] = FALSE;
    }
  }
  return $lookups[$bundle][$machine_name];
}
