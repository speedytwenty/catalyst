<?php
/**
 * @file
 * Code for the Catalyst Media feature.
 */

include_once 'catalyst_media.features.inc';

define('CATALYST_MEDIA_GROUP_LAYOUT', 101);
define('CATALYST_MEDIA_GROUP_LIBRARY', 202);
define('CATALYST_MEDIA_GROUP_PAGE', 303);
define('CATALYST_MEDIA_GROUP_OTHER', 404);

/**
 * Implements hook_ctools_plugin_directory().
 */
function catalyst_media_ctools_plugin_directory($owner, $type) {
  if ($owner == 'catalyst_core') {
    return $type == 'plugin' ? 'plugins/catalyst' : 'plugins/' . $type;
  }
}

/**
 * Implements hook_entity_insert().
 */
function catalyst_media_insert($entity, $entity_type) {
  catalyst_media_entity_save($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function catalyst_media_entity_update($entity, $entity_type) {
  catalyst_media_entity_save($entity, $entity_type);
}

/**
 *
 */
function catalyst_media_entity_save($entity, $entity_type) {
  if ($entity_type == 'catalyst' && in_array($entity->type, array('stylesheet', 'javascript'))) {
    if ($entity->wrapper()->field__media_type->value() == 'custom') {
      catalyst_media_save_file($entity);
    }
  }
}

/**
 */
function catalyst_media_save_file(CatalystEntity $entity) {
  if ($entity->type  == 'javascript') {
    $filepath = catalyst_media_javascript_path($entity);
  }
  else {
    $filepath = catalyst_media_stylesheet_path($entity);
  }
  drupal_mkdir(dirname($filepath), NULL, TRUE);
  $build = $entity->display(TRUE);
  $data = drupal_render($build);
  if (file_exists(drupal_realpath($filepath))) drupal_unlink($filepath);
  file_unmanaged_save_data($data, $filepath, FILE_EXISTS_REPLACE);
}

/**
 * Implements hook_field_formatter_info().
 */
function catalyst_media_field_formatter_info() {
  return array(
    'catalyst_media_stylesheet' => array(
      'label' => t('Attached Stylesheets'),
      'field types' => array('entityreference'),
    ),
    'catalyst_media_javascript' => array(
      'label' => t('Attached Javascripts'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function catalyst_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  switch ($display['type']) {
    case 'catalyst_media_stylesheet':
      $build = array();
      $map = array(
        'field__media_stylesheets__page' => CATALYST_CSS_PAGE,
        'field__media_stylesheets__layout' => CATALYST_CSS_LAYOUT,
      );
      $field_name = $field['field_name'];
      foreach ($items AS $delta => $item) {
        $group = CATALYST_CSS_OTHER;
        if (isset($map[$field_name])) {
          $group = $map[$field_name];
        }
        $item = entity_load_single('catalyst', $item['target_id']);
        catalyst_media_attach_stylesheet($build, $item, $group, $delta);
        //catalyst_media_add_stylesheet($item, $group, $delta);
      }
      return $build;
    case 'catalyst_media_javascript':
      $build = array();
      $map = array(
        'field__media_javascripts__page' => CATALYST_JS_PAGE,
        'field__media_javascripts__layout' => CATALYST_JS_LAYOUT,
      );
      $field_name = $field['field_name'];
      foreach ($items AS $delta => $item) {
        $group = CATALYST_JS_OTHER;
        if (isset($map[$field_name])) {
          $group = $map[$field_name];
        }
        $item = entity_load_single('catalyst', $item['target_id']);
        catalyst_media_attach_javascript($build, $item, $group, $delta);
        //catalyst_media_add_stylesheet($item, $group, $delta);
      }
      return $build;
  }
}

/**
 * Attaches stylesheet css to a render array.
 *
 * @code
 * catalyst_media_attach_stylesheet($render_array, $entity);
 * @endcode
 *
 * @param $render_array
 *   The render array reference to attach the stylesheet to.
 * @param $stylesheet
 *   The CatalystEntity $stylesheet to attach.
 * @param $group
 *   The group to attach to.
 * @param $delta
 *   The field item delta; used to determine the weight.
 */
function catalyst_media_attach_stylesheet(&$render_array, CatalystEntity $stylesheet, $group = CATALYST_CSS_OTHER, $delta = 0) {
  if (empty($render_array['#attached'])) $render_array['#attached'] = array();
  if (empty($render_array['#attached']['css'])) $render_array['#attached']['css'] = array();
  catalyst_include('code');
  $weight = ($delta+1) * 0.1;
  if (!empty($stylesheet->inline)) {
    $render_array['#attached']['css'][$stylesheet->machine] = array(
      'type' => 'inline',
      'data' => $stylesheet->display(FALSE),
      'group' => $group,
      'weight' => $weight,
    );
  }
  else {
    $type = 'file';
    switch ($stylesheet->wrapper()->field__media_type->value()) {
      case 'custom': $path = catalyst_media_stylesheet_path($stylesheet); break;
      case 'remote':
        $type = 'external';
      default: $path = $stylesheet->wrapper()->field__media_path->value();
    }
    $render_array['#attached']['css'][$path] = array(
      'type' => $type,
      'data' => $path,
      'group' => $group,
      'weight' => $weight,
    );
  }
}

/**
 * Add a stylesheet to the page.
 *
 * @param $stylesheet
 *   The CatalystEntity stylesheet to attach.
 * @param $group
 *   The group to attach to.
 * @param $delta
 *   The field item delta; used to determine the weight.
 */
function catalyst_media_add_stylesheet(CatalystEntity $stylesheet, $group = CATALYST_MEDIA_GROUP_OTHER, $delta = 0) {
  $options = array(
    'type' => 'file',
    'group' => $group,
    'media' => $stylesheet->wrapper()->field__media_stylesheet_media->value(),
    'weight' => ($delta+1) * 0.1,
  );

  $options['basename'] = $stylesheet->wrapper()->field__machine->machine->value();
  switch ($stylesheet->wrapper()->field__media_type->value()) {
    case 'custom':
      catalyst_include('twig');
      if ($stylesheet->inline) {
        $data = $stylesheet->display(FALSE);
        $options['type'] = 'inline';
      }
      else {
        $options['type'] = 'external';
        $data = file_create_url(catalyst_media_stylesheet_path($stylesheet));
        //$data = url(catalyst_media_stylesheet_path($stylesheet));
      }
      break;
    case 'local':
      $data = $stylesheet->wrapper()->field__media_path->value();
      break;
    case 'remote':
      $data = $stylesheet->wrapper()->field__media_path->value();
      $options['type'] = 'external';
      break;
  }

  // @todo Add browsers option handling
  if ($group == CATALYST_MEDIA_GROUP_LAYOUT) {
    $options['every_page'] = TRUE;
  }
  drupal_add_css($data, $options);
}

/**
 * Attaches javascript js to a render array.
 *
 * @code
 * catalyst_media_attach_javascript($render_array, $entity);
 * @endcode
 *
 * @param $render_array
 *   The render array reference to attach the javascript to.
 * @param $javascript
 *   The CatalystEntity $javascript to attach.
 * @param $group
 *   The group to attach to.
 * @param $delta
 *   The field item delta; used to determine the weight.
 */
function catalyst_media_attach_javascript(&$render_array, CatalystEntity $javascript, $group = CATALYST_JS_OTHER, $delta = 0) {
  if (empty($render_array['#attached'])) $render_array['#attached'] = array();
  if (empty($render_array['#attached']['js'])) $render_array['#attached']['js'] = array();
  catalyst_include('code');
  $weight = ($delta+1) * 0.1;
  if (!empty($javascript->inline)) {
    $render_array['#attached']['js'][$javascript->machine] = array(
      'type' => 'inline',
      'data' => $javascript->display(FALSE),
      'group' => $group,
      'weight' => $weight,
    );
  }
  else {
    $type = 'file';
    switch ($javascript->wrapper()->field__media_type->value()) {
      case 'custom': $path = file_create_url(catalyst_media_javascript_path($javascript)); break;
      case 'remote':
        $type = 'external';
      default: $path = $javascript->wrapper()->field__media_path->value();
    }
    $render_array['#attached']['js'][$path] = array(
      'type' => $type,
      'data' => $path,
      'group' => $group,
      'weight' => $weight,
    );
  }
}

/**
 * Fetch the path for a stylesheet.
 */
function catalyst_media_stylesheet_path(CatalystEntity $stylesheet) {
  return sprintf('%s/%s.css',
    variable_get('catalyst_media_stylesheet_path', 'public://catalyst/css/media'),
    $stylesheet->machine
  );
}

/**
 * Fetch the path for javascript.
 */
function catalyst_media_javascript_path(CatalystEntity $javascript) {
  return sprintf('%s/%s.js',
    variable_get('catalyst_media_javascript_path', 'public://catalyst/js/media'),
    $javascript->machine
  );
}

/**
 * Implements hook_menu().
 */
function catalyst_media_menu() {
  $stylesheet_path = variable_get('catalyst_media_stylesheet_path', 'catalyst/css/media');
  $stylesheet_menu = $stylesheet_path . '/%catalyst_media_stylesheet';
  $parts = explode('/', $stylesheet_menu);
  $idx = count($parts)-1;
  $items[$stylesheet_menu] = array(
    'page callback' => 'catalyst_media_page',
    'page arguments' => array($idx),
    'access callback' => 'catalyst_media_page_access',
    'access arguments' => array($idx),
  );
  $stylesheet_path = variable_get('catalyst_media_stylesheet_path', 'catalyst/js/media');
  $stylesheet_menu = $stylesheet_path . '/%catalyst_media_javascript';
  $parts = explode('/', $stylesheet_menu);
  $idx = count($parts)-1;
  $items[$stylesheet_menu] = array(
    'page callback' => 'catalyst_media_page',
    'page arguments' => array($idx),
    'access callback' => 'catalyst_media_page_access',
    'access arguments' => array($idx),
  );
  return $items;
}


function catalyst_media_page(CatalystEntity $entity) {
  $build = $entity->display(TRUE);
  $GLOBALS['devel_shutdown'] = FALSE;
  drupal_send_headers();
  print drupal_render($build);
  drupal_exit();
}

function catalyst_media_page_access(CatalystEntity $entity) {
  switch ($entity->wrapper()->field__media_type->value()) {
    case 'custom': return TRUE;
    default: return FALSE;
  }
}

/**
 * Stylesheet Menu loader.
 *
 * @see catalyst_media_menu().
 */
function catalyst_media_stylesheet_load($machine) {
  $stylesheet = catalyst_load_single('stylesheet', $machine);
  return $stylesheet ? $stylesheet->entity : FALSE;
}

/**
 * Javascript Menu loader.
 *
 * @see catalyst_media_menu().
 */
function catalyst_media_javascript_load($machine) {
  $javascript = catalyst_load_single('javascript', $machine);
  return $javascript ? $javascript->entity : FALSE;
}

/**
 * Implements hook_catalyst_twig_alter().
 */
function catalyst_media_catalyst_twig_alter(&$twig) {
  $twig->addFunction(new Twig_SimpleFunction('filepath', 'catalyst_media_filepath'));
  $twig->addFunction(new Twig_SimpleFunction('fileurl', 'catalyst_media_fileurl'));
  $twig->addFunction(new Twig_SimpleFunction('fileuri', 'catalyst_media_fileuri'));
  $twig->addFunction(new Twig_SimpleFunction('customfilepath', 'catalyst_media_customfilepath'));
  $twig->addFunction(new Twig_SimpleFunction('customfileurl', 'catalyst_media_customfileurl'));
  $twig->addFunction(new Twig_SimpleFunction('customfileuri', 'catalyst_media_customfileuri'));
}

function catalyst_media_customfilepath($basename, $format = 'path') {
  $entity = drupal_static('catalyst_twig_entity', FALSE);
  if (!empty($entity->field__files)) {
    foreach ($entity->wrapper()->field__files->value() AS $file) {
      if ($file['filename'] == $basename) {
        if ($format == 'url') {
          return $file['uri'];
        }
        elseif ($format == 'url') {
          return file_create_url($file['uri']);
        }
        else {
          $url = parse_url(file_create_url($file['uri']));
          return $url['path'];
        }
      }
    }
  }
  // log error
}
function catalyst_media_customfileurl($basename) {
  return catalyst_media_customfilepath($basename, 'url');
}

function catalyst_media_customfileuri($basename) {
  return catalyst_media_customfilepath($basename, 'uri');
}

function catalyst_media_filepath($machine_name, $format = 'path') {
  if ($eid = catalyst_lookup_entity('file', $machine_name)) {
    $file = entity_metadata_wrapper('catalyst', $eid);
    switch ($file->field__media_type->value()) {
      case 'local':
      case 'remote':
        return url($file->field__media_path->value());
      case 'custom':
        if (!isset($file->field__media_file) || !$file->field__media_file->value()) {
          throw new Exception(t('Missing catalyst file: @machine_name', array('@machine_name' => $machine_name)));
        }
        if ($format == 'uri') {
          return $file->field__media_file->file->value()->uri;
        }
        elseif ($format == 'url') {
          return $file->field__media_file->file->url->value();
        }
        else {
          $url = parse_url($file->field__media_file->file->url->value());
          return $url['path'];
        }
    }
  }
  // log error
}

function catalyst_media_fileurl($machine_name) {
  return catalyst_media_filepath($machine_name, 'url');
}

function catalyst_media_fileuri($machine_name) {
  return catalyst_media_filepath($machine_name, 'uri');
}


/**
 * Implements hook_form_alter().
 */
function catalyst_media_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field__media_type'], $form['field__media_path'])) {
    $form['#attached']['js'][] = drupal_get_path('module', 'catalyst_media') . '/catalyst_media.admin.js';
    $form['#after_build'][] = 'catalyst_media_admin_form_after_build';
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function catalyst_media_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  catalyst_media_form_alter($entity_form, $form_state, NULL);
}

function catalyst_media_admin_form_after_build($form, &$form_state) {
  $ids = array(
    'type' => $form['field__media_type']['#id'],
    'path' => $form['field__media_path']['#id'],
  );
  if (isset($form['field__body'])) {
    $ids['custom'] = $form['field__body']['#id'];
  }
  elseif (isset($form['field__media_file'])) {
    $ids['custom'] = $form['field__media_file']['#id'];
  }
  $form['#attached']['js'][] = array(
    'data' => array('catalystMediaAdmin' => array('ids' => $ids)),
    'type' => 'setting'
  );
  return $form;
}

/**
 * Implements hook_entity_view().
 */
function catalyst_media_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($view_mode == 'template' && $entity_type == 'catalyst') {
    if (in_array($entity->type, array('stylesheet', 'javascript'))) {
      $entity->content['field__body']['#theme'] = NULL;
      return;
      drupal_add_http_header('Content-type', implode(';', array(
        'text/css',
        'charset=utf-8',
      )));
    }
  }
}
