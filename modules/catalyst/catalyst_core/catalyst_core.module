<?php
/**
 * @file
 * Code for the Catalyst Core feature.
 */

include_once 'catalyst_core.features.inc';

/**
 * Implements hook_entity_info().
 */
function catalyst_entity_info_alter(&$entity_info) {
  $entity_info['catalyst']['access callback'] = 'catalyst_entity_access_strict';
  // Restrict view modes on catalyst entities and add the "template" view
  // mode for the rendering of (some) templates
  $entity_info['catalyst']['view modes'] = array(
    'full' => array(
      'label' => 'Full',
      'custom settings' => FALSE,
    ),
    'template' => array(
      'label' => 'Template',
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Get info about catalyst types.
 */
function catalyst_get_plugin_info($plugin = NULL, $reset = NULL) {
  $stored_info = &drupal_static(__FUNCTION__);
  if ($reset || !isset($stored_info)) {
    foreach (module_implements('catalyst_plugin_info') AS $module) {
      foreach (module_invoke($module, 'catalyst_plugin_info') as $type => $info) {
        $stored_info[$type] = $info + array(
          'module' => $module,
          'exportables' => FALSE,
        );
      }
    }
    drupal_alter('catalyst_plugin_info', $stored_info);
  }
  if ($plugin) {
    return isset($stored_info[$plugin]) ? $stored_info[$plugin] : FALSE;
  }
  return $stored_info;
}

/**
 * Implements hook_hook_info().
 */
function catalyst_core_hook_info() {
  $group = array('group' => 'catalyst');
  // Layout hooks
  $hooks['catalyst_layout_alter'] = $group;
  // Plugin hooks
  $hooks['catalyst_plugin_info'] = $group;
  $hooks['catalyst_plugin_info_alter'] = $group;
  // Export hooks
  $hooks['catalyst_export_dependencies'] = $group;
  $hooks['catalyst_export_candidates'] = $group;
  $hooks['catalyst_prepare_export'] = $group;
  // Menu hooks
  $hooks['catalyst_ignore_menus'] = $group;
  $hooks['catalyst_ignore_menus_alter'] = $group;
  // Twig
  $hooks['catalyst_twig_render_alter'] = $group;
  // Fields, entities, and node related hooks
  $hooks['catalyst_node_types'] = $group;
  $hooks['catalyst_safe_fields'] = $group;
  return $hooks;
}

/**
 * Implements hook_menu_alter().
 */
function catalyst_core_menu_alter(&$menu_items) {
  $path = 'admin/reports/fields';
  if (isset($menu_items[$path])) {
    $menu_items[$path] = array_merge($menu_items[$path], array(
      'page callback' => 'catalyst_field_ui_clean_field_list',
      'file path' => catalyst_get_path() . '/includes',
      'module' => 'catalyst_core',
      'file' => 'fields.inc',
    ));
  }
  catalyst_include('eck');
  catalyst_eck__entity_menu_alter($menu_items);
  catalyst_eck__bundle_menu_alter($menu_items);
  catalyst_eck__entity_type_menu_alter($menu_items);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make the field ui more usable by removing catalyst fields from not
 * catalyst entities.
 *
 * This does not belong in catalyst_admin as theoretically catalyst_admin
 * can be disabled/uninstalled.
 */
function catalyst_core_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  switch (true) {
    // Skip catalyst entity field ui forms
    case $form['#entity_type'] == 'catalyst':
    // Skip catalyst cpage node field ui form
    case $form['#entity_type'] == 'node' && $form['#bundle'] == 'cpage':
      return;
  }
  // After build callback in catalyst_core/includes/uncommoon.inc
  catalyst_form_load_include($form_state, 'uncommon');
  // Make any alterations as late as possible
  $form['#after_build'][99] = 'catalyst_field_ui_field_overview_form_after_build';
}

/**
 * Shortcut function to include common catalyst files.
 */
function catalyst_include($name, $module = 'core') {
  require_once drupal_get_path('module', 'catalyst_' . $module) . '/includes/' . $name . '.inc';
}

function catalyst_form_load_include(&$form_state, $name, $module = 'core') {
  return form_load_include($form_state, 'inc', 'catalyst_' . $module, 'includes/'. $name);
}

function catalyst_get_path($module = 'core') {
  return drupal_get_path('module', 'catalyst_'. $module);
}

function catalyst_node_types() {
  return array_intersect_key(node_type_get_types(),
    array_flip(array('cpage')));
  // module_invoke_all('catalyst_node_types')));
}

function catalyst_entity_is_a($bundle, $entity, $entity_type = 'catalyst', $bundle_key = 'type') {
  switch (true) {
    // Compare the entity type if one is provided
    case isset($entity->entity_type) && $entity->entity_type != $entity_type:
    // Compare the bundle
    case !isset($entity->{$bundle_key}) || $entity->{$bundle_key} != $bundle:
      return FALSE;
  }
  return TRUE;
}

function catalyst_entity_is_new($entity) {
  return isset($entity->is_new) && $entity->is_new;
}

function catalyst_entity_normalize($entity, $bundle = NULL, $entity_type = 'catalyst', $bundle_key = 'type') {
  $return = array();
  $bundle_info = $bundle && $bundle_key ? array($bundle_key => $bundle) : array();
  $wrapper = entity_metadata_wrapper($entity_type, $entity, $bundle_info);
  foreach ($wrapper->getPropertyInfo() AS $key => $info) {
    switch (get_class($wrapper->{$key})) {
      case 'EntityDrupalWrapper':
        $return[$key] = catalyst_entity_normalize_drupal($wrapper->{$key}, $info);
        break;
      case 'EntityListWrapper':
        $return[$key] = catalyst_entity_normalize_list($wrapper->{$key}, $info);
        break;
      default:
        $return[$key] = $wrapper->{$key}->value();
    }
  }
  return (object)$return;
}

function catalyst_entity_normalize_list(EntityListWrapper $wrapper, $info) {
  $return = array();
  foreach ($wrapper AS $key => $val) {
    switch (get_class($val)) {
      case 'EntityDrupalWrapper':
        $return[$key] = catalyst_entity_normalize_drupal($val, $info);
        break;
      case 'EntityValueWrapper':
      case 'EntityStructureWrapper':
        $return[$key] = $wrapper->value();
        break;
      default:
        $return[$key] = $val;
    }
  }
  return $return;
}

function catalyst_entity_normalize_drupal(EntityDrupalWrapper $wrapper, $info) {
  if ((!$entity = $wrapper->value()) || empty($entity->type)) {
    return $entity;
  }
  $m = array();
  if (preg_match('/list\<([a-z0-9_]+)\>/i', $info['type'], $m)) {
    $entity_type = $m[1];
  }
  else $entity_type = $info['type'];
  return catalyst_entity_normalize($entity, $entity->type, $entity_type);
}

function catalyst_array_merge(array &$arr1, array $arr2) {
  $arr1 = array_merge($arr1, $arr2);
  return $arr1;
}

/**
 * @see eck__entity_access().
 */
function catalyst_entity_access_strict($op) {
  if ($op == 'view') {
    $args = func_get_args();
    return call_user_func_array('eck__entity_access', $args);
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide Catalyst features from the features admin list.
 *
 * Note: Catalyst features will be exposed when catalyst_devel is installed.
 */
function catalyst_core_form_features_admin_form_alter(&$form, &$form_state) {
  $form['package_catalyst']['#access'] = FALSE;
}

/**
 *
 */
function catalyst_menu_item_disable(&$menu_item) {
  if ($menu_item['access callback'] !== FALSE) {
    $menu_item['access callback original'] = $menu_item['access callback'];
    $menu_item['access callback'] = FALSE;
  }
}

function catalyst_menu_item_restore(&$menu_item) {
  if ($menu_item['access callback'] === FALSE) {
    $menu_item['access callback'] = $menu_item['access callback original'];
    unset($menu_item['access callback original']);
  }
}
