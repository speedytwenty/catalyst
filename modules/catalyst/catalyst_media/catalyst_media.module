<?php
/**
 * @file
 * Code for the Catalyst Media feature.
 */

include_once 'catalyst_media.features.inc';

define('CATALYST_MEDIA_GROUP_LAYOUT', 101);
define('CATALYST_MEDIA_GROUP_LIBRARY', 202);
define('CATALYST_MEDIA_GROUP_PAGE', 303);
define('CATALYST_MEDIA_GROUP_OTHER', 404);

/**
 * Implements hook_field_formatter_info().
 */
function catalyst_media_field_formatter_info() {
  return array(
    'catalyst_file_basename' => array(
      'label' => t('Catalyst: Basename'),
      'field types' => array('file'),
    ),
    'catalyst_file_import_path' => array(
      'label' => t('Catalyst: Import path'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function catalyst_media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items AS $delta => $item) {
    $basename = drupal_basename($item['uri']);
    switch ($display['type']) {
      case 'catalyst_file_basename':
        $element[$delta] = array('#markup' => $basename);
        break;
      case 'catalyst_file_import_path':
        $wrapper = entity_metadata_wrapper($entity_type, $entity);
        $element[$delta] = array('#markup' => $wrapper->getIdentifier() . '/' . $basename);
        break;
    }
  }
  return $element;
}

/**
 * Implements hook_entity_view_alter().
 */
function catalyst_media_entity_view_alter(&$build, $type) {
  if (isset($build['field_media_content'])) {
    if ($template = $build['field_media_content'][0]['#markup']) {
      theme('media_content', array(
        'template' => $template,
      ));
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function catalyst_media_url_outbound_alter(&$path, &$options, $original_path) {
  catalyst_admin_eck_url_outbound('stylesheet', $path, $options, $original_path);
  catalyst_admin_eck_url_outbound('javascript', $path, $options, $original_path);
  catalyst_admin_eck_url_outbound('file', $path, $options, $original_path, 'admin/content');
}

/**
 * Implements hook_menu_alter().
 */
function catalyst_media_menu_alter(&$items) {
  catalyst_admin_alter_eck_entity_menu($items, 'stylesheet', 'admin/structure', FALSE);
  catalyst_admin_alter_eck_entity_menu($items, 'javascript', 'admin/structure', FALSE);
  catalyst_admin_alter_eck_entity_menu($items, 'file', 'admin/content', FALSE);

  $items['admin/content/file']['type'] = MENU_LOCAL_TASK | MENU_NORMAL_ITEM;
}

/**
 * Implements hook_module_implements_alter().
 */
function catalyst_media_module_implements_alter(&$implementations, $hook) {
  // Run catalyst_media_menu_alter() after views_menu_alter() to allow
  // modifying menu items provided by views.
  if ($hook == 'menu_alter') {
    $group = $implementations['catalyst_media'];
    unset($implementations['catalyst_media']);
    $implementations['catalyst_media'] = $group;
  }
}

/**
 * Implements hook_catalyst_twig_render_alter().
 */
function catalyst_media_catalyst_twig_render_alter(&$twig, &$extensions, &$variables, $key = NULL) {
  $extensions['addFunction']['filepath'] = new Twig_SimpleFunction('filepath', 'catalyst_media_filepath');
}

function catalyst_media_filepath($machine_name) {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'catalyst')
    ->entityCondition('bundle', 'file')
    ->fieldCondition('field_media_machine', 'machine', $machine_name, '=')
    ->addTag(__FUNCTION__);
  $result = $query->execute();
  if (isset($result['catalyst'])) {
    $results = entity_load('catalyst', array_keys($result['catalyst']));
    $file = array_pop($results);
    $file = entity_metadata_wrapper('catalyst', $file);
    switch ($file->field_media_type->value()) {
      case 'local':
      case 'remote':
        return url($file->field_media_path->value());
      case 'custom':
        return file_create_url($file->field_media_file->value()['uri']);
    }
  }
}

function catalyst_load_single_by_machine($bundle, $machine_name, $field = NULL) {
}

/**
 * Implements hook_form_alter().
 */
function catalyst_media_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_media_type'], $form['field_media_path'])) {
    $form['#attached']['js'][] = drupal_get_path('module', 'catalyst_media') . '/catalyst_media.admin.js';
    $form['#after_build'][] = 'catalyst_media_admin_form_after_build';
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function catalyst_media_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  catalyst_media_form_alter($entity_form, $form_state, NULL);
}

function catalyst_media_admin_form_after_build($form, &$form_state) {
  $ids = array(
    'type' => $form['field_media_type']['#id'],
    'path' => $form['field_media_path']['#id'],
  );
  if (isset($form['field_media_content'])) {
    $ids['custom'] = $form['field_media_content']['#id'];
  }
  elseif (isset($form['field_media_file'])) {
    $ids['custom'] = $form['field_media_file']['#id'];
  }
  $form['#attached']['js'][] = array(
    'data' => array('catalystMediaAdmin' => array('ids' => $ids)),
    'type' => 'setting'
  );
  return $form;
}

/**
 * Implements hook_entity_view().
 */
function catalyst_media_entity_view($entity, $type, $view_mode, $langcode) {
  $collection = array(
    'css' => array(
      'field_layout_includes_css' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_includes_css' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_includes_css' => CATALYST_MEDIA_GROUP_OTHER,
    ),
    'js' => array(
      'field_layout_includes_js' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_includes_js' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_includes_js' => CATALYST_MEDIA_GROUP_OTHER,
    ),
  );

  $wrapper = entity_metadata_wrapper($type, $entity);

  foreach ($collection AS $type => $fields) {
    $callback = 'catalyst_add_' . $type;
    foreach ($fields AS $field => $group) {
      if (isset($entity->$field)) {
        foreach ($wrapper->$field->value() AS $include) {
          $include = entity_metadata_wrapper('catalyst', $include);
          $callback($include, $group);
        }
      }
    }
  }

  // Process custom fields
  $collection = array(
    'css' => array(
      'field_layout_css' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_custom_css' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_custom_css' => CATALYST_MEDIA_GROUP_OTHER,
    ),
    'js' => array(
      'field_layout_js' => CATALYST_MEDIA_GROUP_LAYOUT,
      'field_cpage_custom_js' => CATALYST_MEDIA_GROUP_PAGE,
      'field_catalyst_custom_js' => CATALYST_MEDIA_GROUP_OTHER,
    ),
  );
  foreach ($collection AS $type => $fields) {
    $callback = 'catalyst_add_custom_' . $type;
    foreach ($fields AS $field => $group) {
      if (!empty($entity->$field)) {
        foreach ($wrapper->$field->value() AS $data) {
          $callback($data, $group, $field, $wrapper->getIdentifier());
        }
      }
    }
  }
}

/**
 * Implements hook_catalyst_export_groups().
 */
function catalyst_media_catalyst_export_groups() {
  return array(
    'stylesheet' => array(
      'title' => t('Stylesheets'),
      'entity_type' => 'catalyst',
      'bundle' => 'stylesheet',
      'feed_path' => 'admin/structure/stylesheet/export.xml',
      'migration' => array(
        'class_name' => 'CatalystMediaStylesheetMigration',
      ),
    ),
    'javascript' => array(
      'title' => t('Javascripts'),
      'entity_type' => 'catalyst',
      'bundle' => 'javascript',
      'feed_path' => 'admin/structure/javascript/export.xml',
      'migration' => array(
        'class_name' => 'CatalystMediaJavascriptMigration',
      ),
    ),
    'file' => array(
      'title' => t('Shared Files'),
      'entity_type' => 'catalyst',
      'bundle' => 'file',
      'feed_path' => 'admin/content/file/export.xml',
      'migration' => array(
        'class_name' => 'CatalystMediaFileMigration',
      ),
    ),
  );
}

/**
 * Implements hook_catalyst_export_candidates().
 */
function catalyst_media_catalyst_export_candidates($type, $group) {
  if (in_array($type, array('stylesheet', 'javascript', 'file'))) {
    return entity_load('catalyst', FALSE, array('type' => $group['bundle']));
  }
}

/**
 * Implements hook_catalyst_export_dependencies().
 */
function catalyst_media_catalyst_export_dependencies($type, $entity, $group) {
  $dependencies = array();
  $fields = array(
    // field => type
    'field_catalyst_includes_css' => 'stylesheet',
    'field_cpage_includes_css' => 'stylesheet',
    'field_layout_includes_css' => 'stylesheet',
    'field_catalyst_includes_js' => 'javascript',
    'field_cpage_includes_js' => 'javascript',
    'field_layout_includes_js' => 'javascript',
    'field_catalyst_shared_files' => 'file',
  );
  $wrapper = entity_metadata_wrapper($group['entity_type'], $entity);
  foreach ($fields AS $field => $_type) {
    if (isset($wrapper->{$field})) {
      foreach ($wrapper->{$field} AS $item) {
        $dependencies[$_type][$item->getIdentifier()] = $item->value();
      }
    }
  }
  return $dependencies;
}
