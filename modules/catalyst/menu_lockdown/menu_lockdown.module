<?php

/**
 * @file
 * Primary Drupal hooks and globally available API functions for menu_lockdown.
 *
 * The "Menu Lockdown" module allows you to prevent access to "site-building"
 * functionality on production environments.
 *
 * Please view the README.txt included with this module for details about this
 * module.
 */

/**
 * Implements hook_init().
 *
 * Display warnings on blacklisted pages when menu lockdown is disabled or in
 * debug mode.
 */
function menu_lockdown_init() {
  // Without loading internal functions, check if menu_lockdown is disabled in
  // configuration and if a notice should be displayed
  if (menu_lockdown_disabled() && variable_get('menu_lockdown_warn_disabled', TRUE)) {
    // Menu lockdown is disabled in code, load internal functions, and check
    // the current path to see if the current page is blacklisted.
    module_load_include('inc', 'menu_lockdown');
    if (menu_lockdown_path(request_path())) {
      drupal_set_message(t('This page will be locked-down on environments where menu_lockdown is enabled.'), 'status', FALSE);
    }
  }
  // Not disabled. Check if debugging is active and if a notice should be displayed
  elseif (($debug = menu_lockdown_debug()) && variable_get('menu_lockdown_warn_debug', TRUE)) {
    module_load_include('inc', 'menu_lockdown');
    if (menu_lockdown_path(request_path())) {
      drupal_set_message(t('This page is temporarily unlocked for debugging and will become inaccessible when debugging expires at %time', array(
        '%time' => date('g:i A', $debug))),
        'status',
        FALSE
      );
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function menu_lockdown_menu_alter(&$menu_items) {
  // Load internal functions
  module_load_include('inc', 'menu_lockdown');

  // Test each path to see if it should be locked down
  foreach (array_keys($menu_items) AS $path) {
    if (menu_lockdown_path($path)) {
      // Override the access callback for each blacklisted menu item passing
      // the callback and any arguments to the new callback.
      $callback = 'user_access';
      $args = array();
      if (!empty($menu_items[$path]['access callback'])) {
        $callback = $menu_items[$path]['access callback'];
      }
      if (isset($menu_items[$path]['access arguments'])) {
        $args = $menu_items[$path]['access arguments'];
      }
      $menu_items[$path]['access callback'] = 'menu_lockdown_access';
      $menu_items[$path]['access arguments'] = array_merge(array($callback), $args);
    }
  }
}

/**
 * Implements hook_menu().
 */
function menu_lockdown_menu() {
  $items['admin/config/development/menu-lockdown'] = array(
    'title' => 'Menu Lockdown',
    'description' => 'Configure menu lockdown settings or temporarily unlock blacklisted pages.',
    'page callback' => 'menu_lockdown_admin_debug',
    'access arguments' => array('enable menu_lockdown debugging'),
    'file' => 'menu_lockdown.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/development/menu-lockdown/debug'] = array(
    'title' => 'Debugging',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/development/menu-lockdown/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_lockdown_admin_settings_form'),
    'access arguments' => array('configure menu_lockdown settings'),
    'file' => 'menu_lockdown.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permissions().
 */
function menu_lockdown_permissions() {
  return array(
    'enable menu_lockdown debugging' => array(
      'title' => t('Enable menu_lockdown debugging'),
      'description' => t('Allows users to temporarily unlock all pages'),
    ),
    'configure menu_lockdown settings' => array(
      'title' => t('Configure menu_lockdown settings'),
      'description' => t('Adjustment menu_lockdown configuration settings'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function menu_lockdown_theme() {
  return array(
    'menu_lockdown_settings' => array(
      'render element' => 'form',
      'template' => 'menu-lockdown-settings',
    ),
  );
}

/**
 * Implements hook_features_api().
 */
function menu_lockdown_features_api() {
  return array(
    'menu_lockdown' => array(
      'name' => t('Menu Lockdown Suggestions'),
      'default_hook' => 'menu_lockdown_suggestions',
      'default_file' => FEATURES_DEFAULTS_INCLUDED_COMMON,
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'menu_lockdown') . '/menu_lockdown.features.inc',
    ),
  );
}

/**
 * Load core and contrib module hooks included in menu_lockdown.
 *
 * @todo Check if hook already exists to allow included contrib modules to
 *   implement the hook seemlessly.
 */
function menu_lockdown_include_modules() {
  static $menu_lockdown_modules_included;
  if (!isset($menu_lockdown_modules_included)) {
    $directory = drupal_get_path('module', 'menu_lockdown') . '/modules';
    $includes = file_scan_directory($directory, '/.*\.inc$/');
    foreach ($includes AS $file) {
      if (module_exists($file->name)) {
        require_once $file->uri;
      }
    }
  }
}

/**
 * Access callback proxy applied to all blacklisted menu items.
 */
function menu_lockdown_access() {
  module_load_include('inc', 'menu_lockdown');
  if (menu_lockdown_unlocked()) {
    $args = func_get_args();
    $callback = array_shift($args);
    return call_user_func_array($callback, $args);
  }
  return FALSE;
}

/**
 * Check to see if Menu Lockdown is disabled.
 *
 * @return
 *   Returns true when Menu Lockdown is disabled, otherwise it returns false.
 */
function menu_lockdown_disabled() {
  // Menu Lockdown is only intended to be disabled in code so check for a
  // constant rather than a standard configuration variable.
  // @see README.txt
  return defined('MENU_LOCKDOWN_DISABLED');
}

/**
 * Determine if Menu Lockdown's debugging is currently active.
 *
 * @return
 *   Returns the unix timestamp expiration when debugging is active, otherwise
 *   it returns false.
 */
function menu_lockdown_debug() {
  $debug_timeout = variable_get('menu_lockdown_debug', NULL);
  // Check the timeout against the current time
  if ($debug_timeout > time()) {
    return $debug_timeout;
  }
  // Delete expired debug variable to help prevent it getting strongarmed in
  // features.
  if ($debug_timeout !== NULL) {
    variable_del('menu_lockdown_debug');
  }
  return FALSE;
}
