<?php

/**
 * @file
 * Provides custom fields for Catalyst.
 *
 * Defining custom fields with field_info() in features is problematic. So
 * the block placements and (any future custom fields) are defined here.
 *
 * Note: It is anticipated that the layout and doctype reference fields will
 * be consolidated into a single field.
 */

/**
 * Implements hook_field_info().
 */
function catalyst_field_api_field_info() {
  return array(
    'block_placement_block' => array(
      'label' => t('Block placement (block)'),
      'description' => t('Inject the block entity into layouts'),
      'default_widget' => 'block_placement_block_widget',
      'default_formatter' => 'block_placement_block_formatter',
      'property_type' => 'block_placement',
      'property_callbacks' => array('block_placement_property_info'),
    ),
    'block_placement_layout' => array(
      'label' => t('Block placement (layout)'),
      'description' => t('Place blocks into the layout'),
      'default_widget' => 'block_placement_layout_widget',
      'default_formatter' => 'block_placement_layout_formatter',
      'property_type' => 'block_placement',
      'property_callbacks' => array('block_placement_property_info'),
    ),
    'block_placement_layout_field' => array(
      'label' => t('Block placement (layout field)'),
      'description' => t('Add blocks to the node/entities layout'),
      'default_widget' => 'block_placement_layout_field_widget',
      'default_formatter' => 'block_placement_layout_field_formatter',
      'property_type' => 'block_placement',
      'property_callbacks' => array('block_placement_property_info'),
    ),
    'block_placement_entity' => array(
      'label' => t('Block placement (entity)'),
      'description' => t('Add blocks to an entity.'),
      'default_widget' => 'block_placement_entity_field_widget',
      'default_formatter' => 'block_placement_entity_formatter',
      'property_type' => 'block_placement',
      'property_callbacks' => array('block_placement_property_info'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function catalyst_field_api_field_widget_info() {
  return array(
    'block_placement_block_widget' => array(
      'label' => t('Block placement (block)'),
      'field types' => array('block_placement_block'),
    ),
    'block_placement_layout_widget' => array(
      'label' => t('Block placement widget (layout)'),
      'field types' => array('block_placement_layout'),
    ),
    'block_placement_layout_field_widget' => array(
      'label' => t('Block placement widget (layout field)'),
      'field types' => array('block_placement_layout_field'),
    ),
    'block_placement_entity_widget' => array(
      'label' => t('Block placement widget (entity)'),
      'field types' => array('block_placement_entity'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function catalyst_field_api_field_formatter_info() {
  return array(
    'block_placement_entity_formatter' => array(
      'label' => t('Block placement (entity)'),
      'field types' => array('block_placement_entity'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function catalyst_field_api_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  switch ($display['type']) {
    case 'block_placement_entity_formatter':
      $layout = catalyst_get_layout();
      if ($layout_id = $layout->getLayoutEntityId()) {
        foreach ($items AS $item) {
          if ($item['layout_id'] == $layout_id) {
            catalyst_block_add_static_placement($item);
          }
        }
      }
      return;
    default:
      throw new Exception(t('Unknown formatter type: @type', array('@type' => $display['type'])));
  }

}

/**
 * Implements hook_field_widget_form().
 */
function catalyst_field_api_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  form_load_include($form_state, 'inc', 'catalyst_field_api', 'widget/common');

  switch ($instance['widget']['type']) {
    case 'block_placement_block_widget':
      form_load_include($form_state, 'inc', 'catalyst_field_api', 'widget/block');
      return block_placement_block_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    case 'block_placement_layout_widget':
      form_load_include($form_state, 'inc', 'catalyst_field_api', 'widget/layout');
      return block_placement_layout_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    case 'block_placement_layout_field_widget':
      form_load_include($form_state, 'inc', 'catalyst_field_api', 'widget/layout_field');
      return block_placement_layout_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    case 'block_placement_entity_widget':
      form_load_include($form_state, 'inc', 'catalyst_field_api', 'widget/entity');
      return block_placement_entity_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    default:
        throw new Exception(t('Unknown widget type: @type', array('@type' => $instance['widget']['type'])));
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function catalyst_field_api_field_widget_form_alter(&$element, $form_state, $context) {
  if (strpos($context['field']['type'], 'block_placement') === 0) {
    $element['#nodrag'] = TRUE;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function catalyst_field_api_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'block_placement_block':
      return empty($item['layout_id']) || empty($item['region']);
    case 'block_placement_layout':
    case 'block_placement_layout_field':
      return empty($item['block_id']) || empty($item['region']);
    case 'block_placement_entity':
      return empty($item['layout_id']) || empty($item['region']) || empty($item['block_id']);
  }
}

/**
 * Implements hook_theme().
 */
function catalyst_field_api_theme() {
  $module_path = catalyst_get_path('field_api');
  return array(
    'block_placement_block_widget' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'block.inc',
    ),
    'block_placement_layout_field_widget' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'layout_field.inc',
    ),
    'block_placement_layout_field_container_no_layout' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'layout_field.inc',
    ),
    'block_placement_layout_field_container_no_regions' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'layout_field.inc',
    ),
    'block_placement_layout_widget' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'layout.inc',
    ),
    'block_placement_layout_container_no_regions' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'layout.inc',
    ),
    'block_placement_entity_widget' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'entity.inc',
    ),
    'block_placement_entity_container_no_blocks' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'entity.inc',
    ),
    'block_placement_entity_container_no_layouts' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'entity.inc',
    ),
    'block_placement_entity_container_no_regions' => array(
      'render element' => 'element',
      'path' => $module_path . '/widget',
      'file' => 'entity.inc',
    ),
  );
}

/**
 * Property info callback
 *
 * @see catalyst_field_api_field_info().
 */
function block_placement_property_info(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['property info'] = array(
    'layout_id' => array(
      'label' => t('Layout ID'),
    ),
    'block_id' => array(
      'label' => t('Block ID'),
    ),
    'region' => array(
      'label' => t('Region Machine'),
    ),
    'weight' => array(
      'label' => t('Weight'),
    ),
    'visibility' => array(
      'label' => t('Visibility'),
    ),
    'pages' => array(
      'label' => t('Pages'),
    ),
    'cache' => array(
      'label' => t('Cache'),
    ),
  );
  unset($property['query callback']);

  switch ($field_type) {
    case 'block_placement_layout':
      unset($property['property info']['layout_id']);
      break;
    case 'block_placement_block':
      unset($property['property info']['block_id']);
      break;
    case 'block_placement_with_layout':
      unset($property['property info']['visibility']);
      unset($property['property info']['pages']);
      break;
  }

  foreach (array_keys($property['property info']) AS $i) {
    $property['property info'][$i] += array(
      'description' => t('!label of field %name', array(
        '!label' => $property['property info'][$i]['label'],
        '%name' => $field['field_name'],
      )),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    );
  }
}
