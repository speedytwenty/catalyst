<?php
/**
 * @file
 * Code for the Catalyst Block feature.
 */
define('CATALYST_BLOCK_VISIBILITY_ALL', 0);
define('CATALYST_BLOCK_VISIBILITY_ONLY', 1);
define('CATALYST_BLOCK_VISIBILITY_EXCEPT', 2);
define('CATALYST_BLOCK_VISIBILITY_PHP', 3);

include_once 'catalyst_block.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function catalyst_block_ctools_plugin_directory($owner, $type) {
  if ($owner == 'catalyst_core') {
    return $type == 'plugin' ? 'plugins/catalyst' : 'plugins/' . $type;
  }
}



function catalyst_load_blocks() {
  $block_info = module_invoke_all('block_placements');
  drupal_alter('block_placements', $block_info);

  $blocks = array();
  foreach ($block_info AS $placement) {
    $placement = (object)$placement;
    if ($block = entity_load_single('catalyst', $placement->block_id)) {
      if ($accessphp = entity_valval($block->wrapper()->field__access)) {
        if (!(boolean)catalyst_eval($accessphp, $variables)) continue;
      }
      $blocks[$placement->region][$block->machine] = array(
        'content' => $block->display(TRUE),
        '#weight' => $placement->weight,
      );
    }
  }
  return $blocks;
}

/**
 *
 */
function catalyst_blocks_by_region($region) {
  $blocks = &drupal_static(__FUNCTION__);

  if (!isset($blocks)) {
    $blocks = catalyst_load_blocks();
  }

  if (!isset($blocks[$region])) {
    $blocks[$region] = array();
  }

  return $blocks[$region];
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function catalyst_block_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // Hide bulky (and unncessary?) groups/fields when the block form is an
  // inline entity form.
  if ($entity_form['#entity_type'] == 'catalyst' && isset($entity_form['field__body'])) {
    $hide_groups = array('group_block_placement', 'group_block_js', 'group_block_css', 'group_block_files');
    foreach ($hide_groups AS $group) {
      if (isset($entity_form['#groups'][$group])) {
        foreach ($entity_form['#groups'][$group]->children AS $field) {
          hide($entity_form[$field]);
        }
        unset($entity_form['#groups'][$group]);
        unset($entity_form['#fieldgroups'][$group]);
      }
    }
    foreach ($entity_form['#group_children'] AS $field => $group) {
      if (in_array($group, $hide_groups)) {
        unset($entity_form['#group_children'][$field]);
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function catalyst_block_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($entity_type == 'catalyst' && $entity->type == 'block') {
    $entity->setVariable('title', $entity->wrapper()->label());
  }
}


/**
 * Implements hook_entity_view_alter().
 */
function catalyst_block_entity_view_alter(&$build, $type) {
  // Handle "layout field" block placements statically
  if (!empty($build['#entity']->field__blockplacements__layfield)) {
    $wrapper = entity_metadata_wrapper($build['#entity_type'], $build['#entity']);
    foreach ($wrapper->field__blockplacements__layfield AS $placement) {
      catalyst_block_add_static_placement($placement->value());
    }
  }
  if (!empty($build['#entity']->field___block_placements_entity)) {
    foreach ($build['#entity']->wrapper()->field___block_placements_entity AS $placement) {
      catalyst_block_add_static_placement($placement->value());
    }
  }
}

/**
 * Implements hook_page_build().
 */
function catalyst_block_page_build(&$page) {
  if (catalyst_theme_active()) {
    $page['region'] = array();
    if ($regions = catalyst_layout_system_regions()) {
      foreach ($regions AS $region) {
        $page['region'][$region] = catalyst_blocks_by_region($region);
      }
    }
  }
}

/**
 * Implements hook_block_placements().
 */
function catalyst_block_block_placements() {
  $layout = catalyst_get_layout();
  $placements = array();
  if (!empty($layout->id)) {
    $query = db_select('field_data_field__blockplacements__block', 't')
      ->condition('field__blockplacements__block_layout_id', $layout->id, '=');
    $query->addField('t', 'entity_id', 'block_id');
    $query->addField('t', 'field__blockplacements__block_weight', 'weight');
    $query->addField('t', 'field__blockplacements__block_visibility', 'visibility');
    $query->addField('t', 'field__blockplacements__block_pages', 'pages');
    $query->addField('t', 'field__blockplacements__block_cache', 'cache');
    $query->addField('t', 'field__blockplacements__block_region', 'region');

    $result = $query->execute();
    foreach ($result AS $item) {
      $item->layout_id = $layout->id;
      $placements[] = (array)$item;
    }
  }
  if ($static_placements =& drupal_static('catalyst_block_placements')) {
    while ($placement = array_shift($static_placements)) {
      $placements[] = $placement;
    }
  }
  return $placements;
}

function catalyst_block_add_static_placement($placement) {
  $placements =& drupal_static('catalyst_block_placements');
  if (!isset($placements)) {
    $placements = array();
  }
  $placements[] = $placement;
  return $placement;
}

/**
 * Implements hook_block_placements_alter().
 */
function catalyst_block_block_placements_alter(&$placements) {
  foreach ($placements AS $key => $placement) {
    if (isset($placement['visibility']) && $placement['visibility']) {
      $pages = drupal_strtolower($placement['pages']);
      // Not using the function here see block_block_list_alter()
      $request_path = drupal_strtolower($_GET['q']);
      if ($placement['visibility'] == CATALYST_BLOCK_VISIBILITY_PHP) {
        $variables = array();
        if (!catalyst_eval($placement['pages'], $variables)) {
          unset($placements[$key]);
        }
      }
      elseif ($placement['visibility'] > CATALYST_BLOCK_VISIBILITY_ALL) {
        $path = drupal_strtolower(drupal_get_path_alias($request_path));
        $page_match = drupal_match_path($path, $pages);
        if ($path != $request_path) {
          $page_match = $page_match || drupal_match_path($request_path, $pages);
        }
        if (($placement['visibility'] == CATALYST_BLOCK_VISIBILITY_ONLY && !$page_match)
          || ($placement['visibility'] == CATALYST_BLOCK_VISIBILITY_EXCEPT && $page_match)) {
          unset($placements[$key]);
        }
      }
      else continue;
    }
  }
}

/**
 * Implements hook_catalyst_twig_alter().
 */
function catalyst_block_catalyst_twig_alter(&$twig) {
  $twig->addFunction(new Twig_SimpleFunction('showblock', 'catalyst_block_showblock'));
}

/**
 * Twig funciton hanlder for "showblock".
 *
 * @param string $machine_name
 *   The machine_name of the desired block.
 * @param array $variables
 *   Pass custom variables to the block.
 */
function catalyst_block_showblock($machine_name, $variables = array()) {
  if ($block = catalyst_load_single('block', $machine_name)) {
    $block = $block->entity;
    if ($accessphp = entity_valval($block->wrapper()->field__access)) {
      if (!(boolean)catalyst_eval($accessphp, $variables)) return;
    }
    //$build = entity_view('catalyst', array($block->entity));
    $build = $block->display(TRUE);
    return drupal_render($build);
  }
  return;
  // Check permission and output dummy block warning of missing block
  //return  '<h3>Block content here</h3>';
}
