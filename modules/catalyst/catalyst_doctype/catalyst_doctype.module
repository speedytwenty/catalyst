<?php
/**
 * @file
 * Code for the Catalyst Doctype feature.
 */

include_once 'catalyst_doctype.features.inc';

/**
 * Implements hook_url_outbound_alter().
 */
function catalyst_doctype_url_outbound_alter(&$path, &$options, $original_path) {
  catalyst_admin_eck_url_outbound('doctype', $path, $options, $original_path);
}

/**
 * Implements hook_menu_alter().
 */
function catalyst_doctype_menu_alter(&$items) {
  catalyst_admin_alter_eck_entity_menu($items, 'doctype', 'admin/structure', FALSE);
}

/**
 * Implements hook_form_alter().
 */
function catalyst_doctype_form_alter(&$form, &$form_state, $form_id) {
  // Set the default value for the doctype content
  if (isset($form['field_doctype_content']) && isset($form['#entity']->is_new)) {
    $lang = $form['field_doctype_content']['#language'];
    $form['field_doctype_content'][$lang][0]['#after_build'][] = 'field_doctype_content_set_default_value';
  }
}

/**
 * Implements hook_menu().
 */
function catalyst_doctype_menu() {
  $items['admin/structure/doctype/%eckentity/preview'] = array(
    'title' => 'Preview',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('catalyst_doctype_preview_form', 3),
    // Preview access with edit access
    'access callback' => 'eck__entity_menu_access',
    'access arguments' => array('edit', 'catalyst', 'doctype', 3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'catalyst_doctype.pages.inc',
    'weight' => 9,
    'theme callback' => 'catalyst_doctype_custom_theme',
  );
  return $items;
}

/**
 * Implements hook_custom_theme().
 */
function catalyst_doctype_custom_theme() {
  if (preg_match('/admin\/structure\/doctype\/[0-9]+\/preview/i', request_path()) && count($_POST)) {
    return 'notheme';
  }
}

/**
 * Preprocess a doctype element.
 */
function catalyst_doctype_preprocess_doctype(&$variables) {
  $doctype = $variables['page']['#doctype'];

  if (!isset($variables['http_content_type'])) {
    $variables['http_content_type'] = $doctype->getContentType();
  }

  if (!isset($variables['http_charset'])) {
    $variables['http_charset'] = $doctype->getCharset();
  }

  // Custom Preprocessing defined by the doctype
  if ($preprocess_php = $doctype->getPreprocessPHP()) {
    catalyst_eval($preprocess_php, $variables);
  }
}

function catalyst_doctype_process_doctype(&$variables) {
  if (!isset($variables['http_content_type_header'])) {
    $variables['http_content_type_header'] = implode(';', array(
      $variables['http_content_type'],
      'charset=' . $variables['http_charset'],
    ));
  }
  drupal_add_http_header('Content-type', $variables['http_content_type_header']);
}

function catalyst_doctype_get_template(Entity $doctype) {
  $build = eck__entity__view('catalyst', 'doctype', $doctype);
  return render($build);
}

/**
 * Implements hook_catalyst_export_groups().
 */
function catalyst_doctype_catalyst_export_groups() {
  return array(
    'doctype' => array(
      'title' => t('Document types'),
      'entity_type' => 'catalyst',
      'bundle' => 'doctype',
      'weight' => -10,
      'feed_path' => 'admin/structure/doctype/export.xml',
      'feed_id_separator' => '+',
      'feed_id_parameter' => 'ids',
      'migration' => array(
        'class_name' => 'CatalystDoctypeMigration',
        'item_xpath' => '/doctypes/doctype',
        'item_xpath_id' => 'id',
        'map_id_key' => 'id',
      ),
    ),
  );
}

/**
 * Implements hook_catalyst_export_candidates().
 */
function catalyst_doctype_catalyst_export_candidates($type) {
  if ($type == 'doctype') {
    return entity_load('catalyst', FALSE, array('type' => 'doctype'));
  }
}

/**
 * Implements hook_catalyst_export_dependencies().
 */
function catalyst_doctype_catalyst_export_dependencies($type, $entity, $group) {
  $dependencies = array();
  // Determine dependencies for items that rely on doctypes
  if (isset($entity->field_layout_doctype)) {
    $wrapper = entity_metadata_wrapper($group['entity_type'], $entity);
    $doctype = $wrapper->field_layout_doctype;
    $dependencies['doctype'][$doctype->getIdentifier()] = $doctype->value();
  }
  return $dependencies;
}

/**
 * After build callback for setting the doctype content default value.
 *
 * @see catalyst_doctype_form_alter().
 */
function field_doctype_content_set_default_value($element) {
  if (empty($element['#value'])) {
    $element['#value'] = field_doctype_content_default_value();
  }
  return $element;
}

function field_doctype_content_default_value() {
  return implode("\n", array(
    '<html>',
    '  <head>',
    '    {{ head }}',
    '    <title>{{ head_title }}</title>',
    '    {{ styles }}',
    '    {{ scripts }}',
    '  </head>',
    '  <body>',
    '    {{ page_top }}',
    '    {{ page }}',
    '    {{ page_bottom }}',
    '  </body>',
    '</html>',
  ));
}
