[
    {
        "block_placements": [],
        "block_placement_ids": [],
        "id": "block_embed_test",
        "title": "Block Embed Test",
        "content": "<h2>Region Block Tests<\/h2>\n<h3 id=\"embedded-block\">This is a manually embedded block.<\/h3>\n<p>This block has it's own files, css, javascipt, and processing.<\/p>\n<h3>Embedded Block CSS Tests<\/h3>\n<ul><li class=\"block-embed-custom-css-test\">This should have a <strong>solid<\/strong> border.<\/li>\n  <li class=\"block-embed-shared-css-test\">This should have a <strong>double<\/strong> border.<\/li>\n  <li class=\"block-embed-remote-css-test\">This should have a <strong>dotted<\/strong> border.<\/li>\n  <li class=\"block-embed-local-css-test\">This should have a <strong>dashed<\/strong> border.<\/li>\n<\/ul><script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\n  QUnit.test(\"Embedded Block CSS Tests\", function (assert) {\n    assert.equal(jQuery('.block-embed-custom-css-test').css('border-top-style'), 'solid', 'Embedded Block Custom CSS Test');\n    assert.equal(jQuery('.block-embed-shared-css-test').css('border-top-style'), 'double', 'Embedded Block Shared CSS Test');\n    assert.equal(jQuery('.block-embed-local-css-test').css('border-top-style'), 'dashed', 'Embedded Block Local CSS Test');\n    assert.equal(jQuery('.block-embed-remote-css-test').css('border-top-style'), 'dotted', 'Embedded Block Remote CSS Test');\n  });\n\n\/\/--><!]]>\n<\/script><h3>Embedded Block Files Tests<\/h3>\n<strong>Custom file test:<\/strong>\n<ul><li>Test <em>custom<\/em> file PATH: <strong>{{ customfilepath('block-embed-custom-test.png') }}<\/strong><\/li>\n  <li>Test <em>custom<\/em> file URL: <strong>{{ customfileurl('block-embed-custom-test.png') }}<\/strong><\/li>\n  <li>Test <em>custom<\/em> file as image:<br \/><img id=\"block-embed-custom-file-test\" src=\"{{ customfilepath('block-embed-custom-test.png') }}\" \/><\/li>\n<\/ul><strong>Shared file test:<\/strong>\n<ul><li>Test <em>shared<\/em> file PATH: <strong>{{ filepath('block_embed_shared_test') }}<\/strong><\/li>\n  <li>Test <em>shared<\/em> file URL: <strong>{{ fileurl('block_embed_shared_test') }}<\/strong><\/li>\n  <li>Test <em>shared<\/em> file as image:<br \/><img id=\"block-embed-shared-file-test\" src=\"{{ filepath('block_embed_shared_test') }}\" \/><\/li>\n<\/ul><strong>Local file test:<\/strong>\n<ul><li>Test <em>local<\/em> file PATH: <strong>{{ filepath('block_embed_local_test') }}<\/strong><\/li>\n  <li>Test <em>local<\/em> file URL: <strong>{{ fileurl('block_embed_local_test') }}<\/strong><\/li>\n  <li>Test <em>local<\/em> file as image:<br \/><img id=\"block-embed-local-file-test\" src=\"{{ filepath('block_embed_local_test') }}\" \/><\/li>\n<\/ul><strong>Remote file test:<\/strong>\n<ul><li>Test <em>remote<\/em> file PATH: <strong>{{ filepath('block_embed_remote_test') }}<\/strong><\/li>\n  <li>Test <em>remote<\/em> file URL: <strong>{{ fileurl('block_embed_remote_test') }}<\/strong><\/li>\n  <li>Test <em>remote<\/em> file as image:<br \/><img id=\"block-embed-remote-file-test\" src=\"{{ filepath('block_embed_remote_test') }}\" \/><\/li>\n<\/ul><script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\nQUnit.test(\"Embedded Block Tests\", function (assert) {\n  assert.ok('{{ title }}', 'Block \"title\" variable Test');\n  assert.equal('{{ leaf_embedded_block_var }}', 'embedded block var val', 'Embedded Block Processing Test');\n});  \nQUnit.test(\"Embedded Block Javascript Tests\", function (assert) {\n  assert.notEqual(typeof block_embed_custom_js_var, 'undefined', 'Embedded Block Custom Javascript Test');\n  assert.notEqual(typeof block_embed_shared_js_var, 'undefined', 'Embedded Block Shared Javascript Test');\n  assert.notEqual(typeof block_embed_remote_js_var, 'undefined', 'Embedded Block Remote Javascript Test');\n  assert.notEqual(typeof block_embed_local_js_var, 'undefined', 'Embedded Block Local Javascript Test');\n  assert.notEqual(typeof block_embed_footer_js_var, 'undefined', 'Embedded Block Footer Javascript Test');\n});\nQUnit.test(\"Embedded Block Files Tests\", function (assert) {\n  var blockEmbedCustomFileImg = jQuery('img#block-embed-custom-file-test');\n  assert.ok(blockEmbedCustomFileImg.attr('src'), 'Embedded Block Custom File Data Test');\n  assert.equal(blockEmbedCustomFileImg.width(), 410, 'Embedded Block Custom File Exists Test');\n  var blockEmbedSharedFileImg = jQuery('img#block-embed-shared-file-test');\n  assert.ok(blockEmbedSharedFileImg.attr('src'), 'Embedded Block Shared File Data Test');\n  assert.equal(blockEmbedSharedFileImg.width(), 310, 'Embedded Block Shared File Exists Test');\n  var blockEmbedLocalFileImg = jQuery('img#block-embed-local-file-test');\n  assert.ok(blockEmbedLocalFileImg.attr('src'), 'Embedded Block Local File Data Test');\n  assert.equal(blockEmbedLocalFileImg.width(), 210, 'Embedded Block Local File Exists Test');\n  var blockEmbedRemoteFileImg = jQuery('img#block-embed-remote-file-test');\n  assert.ok(blockEmbedRemoteFileImg.attr('src'), 'Embedded Block Remote File Data Test');\n  assert.equal(blockEmbedRemoteFileImg.width(), 110, 'Embedded Block Remote File Exists Test');\n});\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": ".block-embed-custom-css-test {\n  border: 2px solid orange;\n  padding: 4px;\n  margin: 4px;\n}",
        "internal": false,
        "files_custom": [
            "block_embed_test\/block-embed-custom-test.png"
        ],
        "js_custom": "var block_embed_custom_js_var = 'defined';",
        "machine": "block_embed_test",
        "package": "catalyst_test",
        "preprocess_php": "$variables['leaf_embedded_block_var'] = 'embedded block var val';",
        "admin_notes": null,
        "stylesheets": [
            "block_embed_shared_test",
            "block_embed_local_test",
            "block_embed_remote_test"
        ],
        "javascripts": [
            "block_embed_shared_test",
            "block_embed_local_test",
            "block_embed_remote_test",
            "block_embed_footer_test"
        ],
        "files_shared": [
            "block_embed_shared_test",
            "block_embed_local_test",
            "block_embed_remote_test"
        ]
    },
    {
        "block_placements": [
            {
                "region": "block_test_region",
                "weight": "0",
                "visibility": "0",
                "pages": "",
                "cache": "0"
            }
        ],
        "block_placement_ids": [
            "catalyst_test_1"
        ],
        "id": "block_region_test",
        "title": "Block Region Test",
        "content": "<h2>Region Block Tests<\/h2>\n<h3 id=\"region-block\">This is a block placed into a region via the block itself.<\/h3>\n<h3>Region Block CSS Tests<\/h3>\n<ul><li class=\"block-custom-css-test\">This should have a <strong>solid<\/strong> border.<\/li>\n  <li class=\"block-shared-css-test\">This should have a <strong>double<\/strong> border.<\/li>\n  <li class=\"block-remote-css-test\">This should have a <strong>dotted<\/strong> border.<\/li>\n  <li class=\"block-local-css-test\">This should have a <strong>dashed<\/strong> border.<\/li>\n<\/ul><script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\n  QUnit.test(\"Region Block CSS Tests\", function (assert) {\n    assert.equal(jQuery('.block-custom-css-test').css('border-top-style'), 'solid', 'Region Block Custom CSS Test');\n    assert.equal(jQuery('.block-shared-css-test').css('border-top-style'), 'double', 'Region Block Shared CSS Test');\n    assert.equal(jQuery('.block-local-css-test').css('border-top-style'), 'dashed', 'Region Block Local CSS Test');\n    assert.equal(jQuery('.block-remote-css-test').css('border-top-style'), 'dotted', 'Region Block Remote CSS Test');\n  });\n\n\/\/--><!]]>\n<\/script><h3>Region Block Files Tests<\/h3>\n<strong>Custom file test:<\/strong>\n<ul><li>Test <em>custom<\/em> file PATH: <strong>{{ customfilepath('block-custom-test.png') }}<\/strong><\/li>\n  <li>Test <em>custom<\/em> file URL: <strong>{{ customfileurl('block-custom-test.png') }}<\/strong><\/li>\n  <li>Test <em>custom<\/em> file as image:<br \/><img id=\"block-custom-file-test\" src=\"{{ customfilepath('block-custom-test.png') }}\" \/><\/li>\n<\/ul><strong>Shared file test:<\/strong>\n<ul><li>Test <em>shared<\/em> file PATH: <strong>{{ filepath('block_shared_test') }}<\/strong><\/li>\n  <li>Test <em>shared<\/em> file URL: <strong>{{ fileurl('block_shared_test') }}<\/strong><\/li>\n  <li>Test <em>shared<\/em> file as image:<br \/><img id=\"block-shared-file-test\" src=\"{{ filepath('block_shared_test') }}\" \/><\/li>\n<\/ul><strong>Local file test:<\/strong>\n<ul><li>Test <em>local<\/em> file PATH: <strong>{{ filepath('block_local_test') }}<\/strong><\/li>\n  <li>Test <em>local<\/em> file URL: <strong>{{ fileurl('block_local_test') }}<\/strong><\/li>\n  <li>Test <em>local<\/em> file as image:<br \/><img id=\"block-local-file-test\" src=\"{{ filepath('block_local_test') }}\" \/><\/li>\n<\/ul><strong>Remote file test:<\/strong>\n<ul><li>Test <em>remote<\/em> file PATH: <strong>{{ filepath('block_remote_test') }}<\/strong><\/li>\n  <li>Test <em>remote<\/em> file URL: <strong>{{ fileurl('block_remote_test') }}<\/strong><\/li>\n  <li>Test <em>remote<\/em> file as image:<br \/><img id=\"block-remote-file-test\" src=\"{{ filepath('block_remote_test') }}\" \/><\/li>\n<\/ul><script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\nQUnit.test(\"Region Block Tests\", function (assert) {\n  assert.ok('{{ title }}', 'Block \"title\" variable Test');\n  assert.equal('{{ leaf_region_block_var }}', 'region block var val', 'Region Block Processing Test');\n});  \nQUnit.test(\"Region Block Javascript Tests\", function (assert) {\n  assert.notEqual(typeof block_custom_js_var, 'undefined', 'Region Block Custom Javascript Test');\n  assert.notEqual(typeof block_shared_js_var, 'undefined', 'Region Block Shared Javascript Test');\n  assert.notEqual(typeof block_remote_js_var, 'undefined', 'Region Block Remote Javascript Test');\n  assert.notEqual(typeof block_local_js_var, 'undefined', 'Region Block Local Javascript Test');\n  assert.notEqual(typeof block_footer_js_var, 'undefined', 'Region Block Footer Javascript Test');\n});\nQUnit.test(\"Region Block Files Tests\", function (assert) {\n  var blockCustomFileImg = jQuery('img#block-custom-file-test');\n  assert.ok(blockCustomFileImg.attr('src'), 'Region Block Custom File Data Test');\n  assert.equal(blockCustomFileImg.width(), 403, 'Region Block Custom File Exists Test');\n  var blockSharedFileImg = jQuery('img#block-shared-file-test');\n  assert.ok(blockSharedFileImg.attr('src'), 'Region Block Shared File Data Test');\n  assert.equal(blockSharedFileImg.width(), 303, 'Region Block Shared File Exists Test');\n  var blockLocalFileImg = jQuery('img#block-local-file-test');\n  assert.ok(blockLocalFileImg.attr('src'), 'Region Block Local File Data Test');\n  assert.equal(blockLocalFileImg.width(), 203, 'Region Block Local File Exists Test');\n  var blockRemoteFileImg = jQuery('img#block-remote-file-test');\n  assert.ok(blockRemoteFileImg.attr('src'), 'Region Block Remote File Data Test');\n  assert.equal(blockRemoteFileImg.width(), 103, 'Region Block Remote File Exists Test');\n});\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": ".block-custom-css-test {\n  border: 2px solid red;\n  padding: 4px;\n  margin: 4px;\n}",
        "internal": false,
        "files_custom": [
            "block_region_test\/block-custom-test.png"
        ],
        "js_custom": "var block_custom_js_var = 'defined';",
        "machine": "block_region_test",
        "package": "catalyst_test",
        "preprocess_php": "$variables['leaf_region_block_var'] = 'region block var val';",
        "admin_notes": null,
        "stylesheets": [
            "block_shared_test",
            "block_local_test",
            "block_remote_test"
        ],
        "javascripts": [
            "block_shared_test",
            "block_local_test",
            "block_remote_test",
            "block_footer_test"
        ],
        "files_shared": [
            "block_shared_test",
            "block_local_test",
            "block_remote_test"
        ]
    },
    {
        "block_placements": [
            {
                "region": "block_test_region",
                "weight": "50",
                "visibility": "0",
                "pages": "",
                "cache": "0"
            }
        ],
        "block_placement_ids": [
            "catalyst_test_1"
        ],
        "id": "catalyst_test_json",
        "title": "Catalyst Test - JSON",
        "content": "<div id=\"json-test\" class=\"block\">\n  <h3>JSON Test<\/h3>\n  <h4 id=\"json-test-title\"><\/h4>\n  <p id=\"json-test-description\"><\/p>\n  <blockquote id=\"json-test-response\"><\/blockquote>\n<\/div>\n<script type=\"text\/javascript\">\n<!--\/\/--><![CDATA[\/\/ ><!--\n\n  jQuery.ajax({\n    url: 'catalyst-test.json',\n  }).done(function (data) {\n    console.log(data);\n    jQuery('#json-test-response').html(data);\n    jQuery('#json-test-title').html(data.title);\n    jQuery('#json-test-description').html(data.description);\n  })\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": null,
        "internal": false,
        "files_custom": [],
        "js_custom": null,
        "machine": "catalyst_test_json",
        "package": "catalyst_test",
        "preprocess_php": null,
        "admin_notes": null,
        "stylesheets": [],
        "javascripts": [],
        "files_shared": []
    },
    {
        "block_placements": [],
        "block_placement_ids": [],
        "id": "page_embedded_block_test",
        "title": "Page Embedded Block Test",
        "content": "<h3 id=\"page-embedded-block\">This is a block manually embedded by the page.<\/h3>\n<script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\nQUnit.test(\"Page Embedded Block Tests\", function (assert) {\n  assert.equal('{{ page_embedded_block_var }}', 'embedded block var val', 'Page Embedded Block Processing Test');\n});\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": null,
        "internal": false,
        "files_custom": [],
        "js_custom": null,
        "machine": "page_embedded_block_test",
        "package": "catalyst_test",
        "preprocess_php": "$variables['page_embedded_block_var'] = 'embedded block var val';",
        "admin_notes": null,
        "stylesheets": [],
        "javascripts": [],
        "files_shared": []
    },
    {
        "block_placements": [],
        "block_placement_ids": [],
        "id": "layout_embedded_block_test",
        "title": "Layout Embedded Block Test",
        "content": "<h3 id=\"layout-embedded-block\">This is a block manually embedded in the layout.<\/h3>\n<script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\nQUnit.test(\"Layout Embedded Block Tests\", function (assert) {\n  assert.equal('{{ embedded_block_var }}', 'embedded block var val', 'Layout Embedded Block Processing Test');\n});\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": null,
        "internal": false,
        "files_custom": [],
        "js_custom": null,
        "machine": "layout_embedded_block_test",
        "package": "catalyst_test",
        "preprocess_php": "$variables['embedded_block_var'] = 'embedded block var val';",
        "admin_notes": null,
        "stylesheets": [],
        "javascripts": [],
        "files_shared": []
    },
    {
        "block_placements": [],
        "block_placement_ids": [],
        "id": "page_region_block_test",
        "title": "Page Region Block Test",
        "content": "<h3 id=\"page-region-block\">This is a block placed into a region via the page.<\/h3>\n<script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\nQUnit.test(\"Page Region Block Tests\", function (assert) {\n  assert.equal('{{ page_region_block_var }}', 'region block var val', 'Page Region Block Processing Test');\n});\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": null,
        "internal": false,
        "files_custom": [],
        "js_custom": null,
        "machine": "page_region_block_test",
        "package": "catalyst_test",
        "preprocess_php": "$variables['page_region_block_var'] = 'region block var val';",
        "admin_notes": null,
        "stylesheets": [],
        "javascripts": [],
        "files_shared": []
    },
    {
        "block_placements": [],
        "block_placement_ids": [],
        "id": "layout_region_block_test",
        "title": "Layout Region Block Test",
        "content": "<h3 id=\"layout-region-block\">This is a block placed into a region via the layout.<\/h3>\n<script>\n<!--\/\/--><![CDATA[\/\/ ><!--\n\nQUnit.test(\"Layout Region Block Tests\", function (assert) {\n  assert.equal('{{ region_block_var }}', 'region block var val', 'Layout Region Block Processing Test');\n});\n\n\/\/--><!]]>\n<\/script>",
        "css_custom": null,
        "internal": false,
        "files_custom": [],
        "js_custom": null,
        "machine": "layout_region_block_test",
        "package": "catalyst_test",
        "preprocess_php": "$variables['region_block_var'] = 'region block var val';",
        "admin_notes": null,
        "stylesheets": [],
        "javascripts": [],
        "files_shared": []
    }
]